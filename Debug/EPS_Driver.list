
EPS_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003668  08003668  00013668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003680  08003680  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003688  08003688  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800368c  0800368c  0001368c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000294  20000018  20000018  00020018  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013070  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad7  00000000  00000000  000330b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000ae8e  00000000  00000000  00035b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c50  00000000  00000000  00040a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000ca0  00000000  00000000  00041670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000216ae  00000000  00000000  00042310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013b6b  00000000  00000000  000639be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cde8d  00000000  00000000  00077529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001453b6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000209c  00000000  00000000  0014540c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003650 	.word	0x08003650

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003650 	.word	0x08003650

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b96e 	b.w	8000ad8 <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9d08      	ldr	r5, [sp, #32]
 800081a:	4604      	mov	r4, r0
 800081c:	468c      	mov	ip, r1
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8083 	bne.w	800092a <__udivmoddi4+0x116>
 8000824:	428a      	cmp	r2, r1
 8000826:	4617      	mov	r7, r2
 8000828:	d947      	bls.n	80008ba <__udivmoddi4+0xa6>
 800082a:	fab2 f282 	clz	r2, r2
 800082e:	b142      	cbz	r2, 8000842 <__udivmoddi4+0x2e>
 8000830:	f1c2 0020 	rsb	r0, r2, #32
 8000834:	fa24 f000 	lsr.w	r0, r4, r0
 8000838:	4091      	lsls	r1, r2
 800083a:	4097      	lsls	r7, r2
 800083c:	ea40 0c01 	orr.w	ip, r0, r1
 8000840:	4094      	lsls	r4, r2
 8000842:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000846:	0c23      	lsrs	r3, r4, #16
 8000848:	fbbc f6f8 	udiv	r6, ip, r8
 800084c:	fa1f fe87 	uxth.w	lr, r7
 8000850:	fb08 c116 	mls	r1, r8, r6, ip
 8000854:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000858:	fb06 f10e 	mul.w	r1, r6, lr
 800085c:	4299      	cmp	r1, r3
 800085e:	d909      	bls.n	8000874 <__udivmoddi4+0x60>
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	f106 30ff 	add.w	r0, r6, #4294967295
 8000866:	f080 8119 	bcs.w	8000a9c <__udivmoddi4+0x288>
 800086a:	4299      	cmp	r1, r3
 800086c:	f240 8116 	bls.w	8000a9c <__udivmoddi4+0x288>
 8000870:	3e02      	subs	r6, #2
 8000872:	443b      	add	r3, r7
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb3 f0f8 	udiv	r0, r3, r8
 800087c:	fb08 3310 	mls	r3, r8, r0, r3
 8000880:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000884:	fb00 fe0e 	mul.w	lr, r0, lr
 8000888:	45a6      	cmp	lr, r4
 800088a:	d909      	bls.n	80008a0 <__udivmoddi4+0x8c>
 800088c:	193c      	adds	r4, r7, r4
 800088e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000892:	f080 8105 	bcs.w	8000aa0 <__udivmoddi4+0x28c>
 8000896:	45a6      	cmp	lr, r4
 8000898:	f240 8102 	bls.w	8000aa0 <__udivmoddi4+0x28c>
 800089c:	3802      	subs	r0, #2
 800089e:	443c      	add	r4, r7
 80008a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008a4:	eba4 040e 	sub.w	r4, r4, lr
 80008a8:	2600      	movs	r6, #0
 80008aa:	b11d      	cbz	r5, 80008b4 <__udivmoddi4+0xa0>
 80008ac:	40d4      	lsrs	r4, r2
 80008ae:	2300      	movs	r3, #0
 80008b0:	e9c5 4300 	strd	r4, r3, [r5]
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xaa>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d150      	bne.n	8000968 <__udivmoddi4+0x154>
 80008c6:	1bcb      	subs	r3, r1, r7
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	fa1f f887 	uxth.w	r8, r7
 80008d0:	2601      	movs	r6, #1
 80008d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80008d6:	0c21      	lsrs	r1, r4, #16
 80008d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80008dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e0:	fb08 f30c 	mul.w	r3, r8, ip
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d907      	bls.n	80008f8 <__udivmoddi4+0xe4>
 80008e8:	1879      	adds	r1, r7, r1
 80008ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008ee:	d202      	bcs.n	80008f6 <__udivmoddi4+0xe2>
 80008f0:	428b      	cmp	r3, r1
 80008f2:	f200 80e9 	bhi.w	8000ac8 <__udivmoddi4+0x2b4>
 80008f6:	4684      	mov	ip, r0
 80008f8:	1ac9      	subs	r1, r1, r3
 80008fa:	b2a3      	uxth	r3, r4
 80008fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000900:	fb0e 1110 	mls	r1, lr, r0, r1
 8000904:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000908:	fb08 f800 	mul.w	r8, r8, r0
 800090c:	45a0      	cmp	r8, r4
 800090e:	d907      	bls.n	8000920 <__udivmoddi4+0x10c>
 8000910:	193c      	adds	r4, r7, r4
 8000912:	f100 33ff 	add.w	r3, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x10a>
 8000918:	45a0      	cmp	r8, r4
 800091a:	f200 80d9 	bhi.w	8000ad0 <__udivmoddi4+0x2bc>
 800091e:	4618      	mov	r0, r3
 8000920:	eba4 0408 	sub.w	r4, r4, r8
 8000924:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000928:	e7bf      	b.n	80008aa <__udivmoddi4+0x96>
 800092a:	428b      	cmp	r3, r1
 800092c:	d909      	bls.n	8000942 <__udivmoddi4+0x12e>
 800092e:	2d00      	cmp	r5, #0
 8000930:	f000 80b1 	beq.w	8000a96 <__udivmoddi4+0x282>
 8000934:	2600      	movs	r6, #0
 8000936:	e9c5 0100 	strd	r0, r1, [r5]
 800093a:	4630      	mov	r0, r6
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	fab3 f683 	clz	r6, r3
 8000946:	2e00      	cmp	r6, #0
 8000948:	d14a      	bne.n	80009e0 <__udivmoddi4+0x1cc>
 800094a:	428b      	cmp	r3, r1
 800094c:	d302      	bcc.n	8000954 <__udivmoddi4+0x140>
 800094e:	4282      	cmp	r2, r0
 8000950:	f200 80b8 	bhi.w	8000ac4 <__udivmoddi4+0x2b0>
 8000954:	1a84      	subs	r4, r0, r2
 8000956:	eb61 0103 	sbc.w	r1, r1, r3
 800095a:	2001      	movs	r0, #1
 800095c:	468c      	mov	ip, r1
 800095e:	2d00      	cmp	r5, #0
 8000960:	d0a8      	beq.n	80008b4 <__udivmoddi4+0xa0>
 8000962:	e9c5 4c00 	strd	r4, ip, [r5]
 8000966:	e7a5      	b.n	80008b4 <__udivmoddi4+0xa0>
 8000968:	f1c2 0320 	rsb	r3, r2, #32
 800096c:	fa20 f603 	lsr.w	r6, r0, r3
 8000970:	4097      	lsls	r7, r2
 8000972:	fa01 f002 	lsl.w	r0, r1, r2
 8000976:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800097a:	40d9      	lsrs	r1, r3
 800097c:	4330      	orrs	r0, r6
 800097e:	0c03      	lsrs	r3, r0, #16
 8000980:	fbb1 f6fe 	udiv	r6, r1, lr
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	fb0e 1116 	mls	r1, lr, r6, r1
 800098c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000990:	fb06 f108 	mul.w	r1, r6, r8
 8000994:	4299      	cmp	r1, r3
 8000996:	fa04 f402 	lsl.w	r4, r4, r2
 800099a:	d909      	bls.n	80009b0 <__udivmoddi4+0x19c>
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	f106 3cff 	add.w	ip, r6, #4294967295
 80009a2:	f080 808d 	bcs.w	8000ac0 <__udivmoddi4+0x2ac>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 808a 	bls.w	8000ac0 <__udivmoddi4+0x2ac>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	443b      	add	r3, r7
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	b281      	uxth	r1, r0
 80009b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c0:	fb00 f308 	mul.w	r3, r0, r8
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x1c4>
 80009c8:	1879      	adds	r1, r7, r1
 80009ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80009ce:	d273      	bcs.n	8000ab8 <__udivmoddi4+0x2a4>
 80009d0:	428b      	cmp	r3, r1
 80009d2:	d971      	bls.n	8000ab8 <__udivmoddi4+0x2a4>
 80009d4:	3802      	subs	r0, #2
 80009d6:	4439      	add	r1, r7
 80009d8:	1acb      	subs	r3, r1, r3
 80009da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009de:	e778      	b.n	80008d2 <__udivmoddi4+0xbe>
 80009e0:	f1c6 0c20 	rsb	ip, r6, #32
 80009e4:	fa03 f406 	lsl.w	r4, r3, r6
 80009e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80009ec:	431c      	orrs	r4, r3
 80009ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80009f2:	fa01 f306 	lsl.w	r3, r1, r6
 80009f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80009fe:	431f      	orrs	r7, r3
 8000a00:	0c3b      	lsrs	r3, r7, #16
 8000a02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a06:	fa1f f884 	uxth.w	r8, r4
 8000a0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a12:	fb09 fa08 	mul.w	sl, r9, r8
 8000a16:	458a      	cmp	sl, r1
 8000a18:	fa02 f206 	lsl.w	r2, r2, r6
 8000a1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a20:	d908      	bls.n	8000a34 <__udivmoddi4+0x220>
 8000a22:	1861      	adds	r1, r4, r1
 8000a24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a28:	d248      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a2a:	458a      	cmp	sl, r1
 8000a2c:	d946      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a32:	4421      	add	r1, r4
 8000a34:	eba1 010a 	sub.w	r1, r1, sl
 8000a38:	b2bf      	uxth	r7, r7
 8000a3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a46:	fb00 f808 	mul.w	r8, r0, r8
 8000a4a:	45b8      	cmp	r8, r7
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x24a>
 8000a4e:	19e7      	adds	r7, r4, r7
 8000a50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a54:	d22e      	bcs.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a56:	45b8      	cmp	r8, r7
 8000a58:	d92c      	bls.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a5a:	3802      	subs	r0, #2
 8000a5c:	4427      	add	r7, r4
 8000a5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a62:	eba7 0708 	sub.w	r7, r7, r8
 8000a66:	fba0 8902 	umull	r8, r9, r0, r2
 8000a6a:	454f      	cmp	r7, r9
 8000a6c:	46c6      	mov	lr, r8
 8000a6e:	4649      	mov	r1, r9
 8000a70:	d31a      	bcc.n	8000aa8 <__udivmoddi4+0x294>
 8000a72:	d017      	beq.n	8000aa4 <__udivmoddi4+0x290>
 8000a74:	b15d      	cbz	r5, 8000a8e <__udivmoddi4+0x27a>
 8000a76:	ebb3 020e 	subs.w	r2, r3, lr
 8000a7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000a7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a82:	40f2      	lsrs	r2, r6
 8000a84:	ea4c 0202 	orr.w	r2, ip, r2
 8000a88:	40f7      	lsrs	r7, r6
 8000a8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000a8e:	2600      	movs	r6, #0
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	462e      	mov	r6, r5
 8000a98:	4628      	mov	r0, r5
 8000a9a:	e70b      	b.n	80008b4 <__udivmoddi4+0xa0>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	e6e9      	b.n	8000874 <__udivmoddi4+0x60>
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	e6fd      	b.n	80008a0 <__udivmoddi4+0x8c>
 8000aa4:	4543      	cmp	r3, r8
 8000aa6:	d2e5      	bcs.n	8000a74 <__udivmoddi4+0x260>
 8000aa8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000aac:	eb69 0104 	sbc.w	r1, r9, r4
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7df      	b.n	8000a74 <__udivmoddi4+0x260>
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e7d2      	b.n	8000a5e <__udivmoddi4+0x24a>
 8000ab8:	4660      	mov	r0, ip
 8000aba:	e78d      	b.n	80009d8 <__udivmoddi4+0x1c4>
 8000abc:	4681      	mov	r9, r0
 8000abe:	e7b9      	b.n	8000a34 <__udivmoddi4+0x220>
 8000ac0:	4666      	mov	r6, ip
 8000ac2:	e775      	b.n	80009b0 <__udivmoddi4+0x19c>
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	e74a      	b.n	800095e <__udivmoddi4+0x14a>
 8000ac8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000acc:	4439      	add	r1, r7
 8000ace:	e713      	b.n	80008f8 <__udivmoddi4+0xe4>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	443c      	add	r4, r7
 8000ad4:	e724      	b.n	8000920 <__udivmoddi4+0x10c>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_idiv0>:
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <M_CAN_Filter_Init>:

#include "M_CAN_FilterSetup.h"


void M_CAN_Filter_Init(M_CAN_Filter_Typedef *pFilt_Cfg, CAN_HandleTypeDef *hCAN)
{
 8000adc:	b510      	push	{r4, lr}
 8000ade:	460c      	mov	r4, r1

	pFilt_Cfg->FilterConf.FilterBank = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	6143      	str	r3, [r0, #20]
	pFilt_Cfg->FilterConf.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ae4:	6183      	str	r3, [r0, #24]
	pFilt_Cfg->FilterConf.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	61c2      	str	r2, [r0, #28]

	pFilt_Cfg->FilterConf.FilterIdHigh = 0x0000;
 8000aea:	6003      	str	r3, [r0, #0]
	pFilt_Cfg->FilterConf.FilterIdLow = 0x0000;
 8000aec:	6043      	str	r3, [r0, #4]

	pFilt_Cfg->FilterConf.FilterMaskIdHigh = 0x0000;
 8000aee:	6083      	str	r3, [r0, #8]
	pFilt_Cfg->FilterConf.FilterMaskIdLow = 0x0000;
 8000af0:	60c3      	str	r3, [r0, #12]
	pFilt_Cfg->FilterConf.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000af2:	6103      	str	r3, [r0, #16]

	pFilt_Cfg->FilterConf.FilterActivation = ENABLE;
 8000af4:	6202      	str	r2, [r0, #32]
	pFilt_Cfg->FilterConf.SlaveStartFilterBank = 0;
 8000af6:	6243      	str	r3, [r0, #36]	; 0x24

	HAL_CAN_ConfigFilter(hCAN, &pFilt_Cfg->FilterConf);
 8000af8:	4601      	mov	r1, r0
 8000afa:	4620      	mov	r0, r4
 8000afc:	f001 f864 	bl	8001bc8 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(hCAN, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b00:	2102      	movs	r1, #2
 8000b02:	4620      	mov	r0, r4
 8000b04:	f001 fa3d 	bl	8001f82 <HAL_CAN_ActivateNotification>


}
 8000b08:	bd10      	pop	{r4, pc}
	...

08000b0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b0c:	b500      	push	{lr}
 8000b0e:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b10:	2300      	movs	r3, #0
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b1a:	482b      	ldr	r0, [pc, #172]	; (8000bc8 <MX_ADC1_Init+0xbc>)
 8000b1c:	4a2b      	ldr	r2, [pc, #172]	; (8000bcc <MX_ADC1_Init+0xc0>)
 8000b1e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000b20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b24:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b26:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b28:	2201      	movs	r2, #1
 8000b2a:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b2c:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b2e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b32:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b34:	4926      	ldr	r1, [pc, #152]	; (8000bd0 <MX_ADC1_Init+0xc4>)
 8000b36:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b38:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000b3a:	2105      	movs	r1, #5
 8000b3c:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b3e:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b42:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b44:	f000 fd08 	bl	8001558 <HAL_ADC_Init>
 8000b48:	bb60      	cbnz	r0, 8000ba4 <MX_ADC1_Init+0x98>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000b4e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000b50:	2307      	movs	r3, #7
 8000b52:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b54:	4669      	mov	r1, sp
 8000b56:	481c      	ldr	r0, [pc, #112]	; (8000bc8 <MX_ADC1_Init+0xbc>)
 8000b58:	f000 fedc 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000b5c:	bb28      	cbnz	r0, 8000baa <MX_ADC1_Init+0x9e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000b62:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	4669      	mov	r1, sp
 8000b66:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <MX_ADC1_Init+0xbc>)
 8000b68:	f000 fed4 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000b6c:	bb00      	cbnz	r0, 8000bb0 <MX_ADC1_Init+0xa4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000b72:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b74:	4669      	mov	r1, sp
 8000b76:	4814      	ldr	r0, [pc, #80]	; (8000bc8 <MX_ADC1_Init+0xbc>)
 8000b78:	f000 fecc 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000b7c:	b9d8      	cbnz	r0, 8000bb6 <MX_ADC1_Init+0xaa>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8000b82:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b84:	4669      	mov	r1, sp
 8000b86:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <MX_ADC1_Init+0xbc>)
 8000b88:	f000 fec4 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000b8c:	b9b0      	cbnz	r0, 8000bbc <MX_ADC1_Init+0xb0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 8000b92:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b94:	4669      	mov	r1, sp
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_ADC1_Init+0xbc>)
 8000b98:	f000 febc 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000b9c:	b988      	cbnz	r0, 8000bc2 <MX_ADC1_Init+0xb6>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b9e:	b005      	add	sp, #20
 8000ba0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ba4:	f000 fb14 	bl	80011d0 <Error_Handler>
 8000ba8:	e7cf      	b.n	8000b4a <MX_ADC1_Init+0x3e>
    Error_Handler();
 8000baa:	f000 fb11 	bl	80011d0 <Error_Handler>
 8000bae:	e7d6      	b.n	8000b5e <MX_ADC1_Init+0x52>
    Error_Handler();
 8000bb0:	f000 fb0e 	bl	80011d0 <Error_Handler>
 8000bb4:	e7db      	b.n	8000b6e <MX_ADC1_Init+0x62>
    Error_Handler();
 8000bb6:	f000 fb0b 	bl	80011d0 <Error_Handler>
 8000bba:	e7e0      	b.n	8000b7e <MX_ADC1_Init+0x72>
    Error_Handler();
 8000bbc:	f000 fb08 	bl	80011d0 <Error_Handler>
 8000bc0:	e7e5      	b.n	8000b8e <MX_ADC1_Init+0x82>
    Error_Handler();
 8000bc2:	f000 fb05 	bl	80011d0 <Error_Handler>
}
 8000bc6:	e7ea      	b.n	8000b9e <MX_ADC1_Init+0x92>
 8000bc8:	20000034 	.word	0x20000034
 8000bcc:	40012000 	.word	0x40012000
 8000bd0:	0f000001 	.word	0x0f000001

08000bd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bd4:	b530      	push	{r4, r5, lr}
 8000bd6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9303      	str	r3, [sp, #12]
 8000bdc:	9304      	str	r3, [sp, #16]
 8000bde:	9305      	str	r3, [sp, #20]
 8000be0:	9306      	str	r3, [sp, #24]
 8000be2:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000be4:	6802      	ldr	r2, [r0, #0]
 8000be6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bea:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d001      	beq.n	8000bf6 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bf2:	b009      	add	sp, #36	; 0x24
 8000bf4:	bd30      	pop	{r4, r5, pc}
 8000bf6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	9501      	str	r5, [sp, #4]
 8000bfc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c06:	645a      	str	r2, [r3, #68]	; 0x44
 8000c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c0a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000c0e:	9201      	str	r2, [sp, #4]
 8000c10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	9502      	str	r5, [sp, #8]
 8000c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c16:	f042 0201 	orr.w	r2, r2, #1
 8000c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000c26:	233e      	movs	r3, #62	; 0x3e
 8000c28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	a903      	add	r1, sp, #12
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <HAL_ADC_MspInit+0xa0>)
 8000c34:	f001 fd3e 	bl	80026b4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000c38:	480f      	ldr	r0, [pc, #60]	; (8000c78 <HAL_ADC_MspInit+0xa4>)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_ADC_MspInit+0xa8>)
 8000c3c:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c3e:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c40:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c42:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c48:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c4e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c54:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5a:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c5c:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c5e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c60:	f001 fb5c 	bl	800231c <HAL_DMA_Init>
 8000c64:	b918      	cbnz	r0, 8000c6e <HAL_ADC_MspInit+0x9a>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <HAL_ADC_MspInit+0xa4>)
 8000c68:	63a3      	str	r3, [r4, #56]	; 0x38
 8000c6a:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000c6c:	e7c1      	b.n	8000bf2 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000c6e:	f000 faaf 	bl	80011d0 <Error_Handler>
 8000c72:	e7f8      	b.n	8000c66 <HAL_ADC_MspInit+0x92>
 8000c74:	40020000 	.word	0x40020000
 8000c78:	2000007c 	.word	0x2000007c
 8000c7c:	40026410 	.word	0x40026410

08000c80 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000c80:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c82:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_CAN1_Init+0x38>)
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <MX_CAN1_Init+0x3c>)
 8000c86:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 3;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c90:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000c92:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000c96:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c9c:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c9e:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ca0:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ca2:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ca4:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ca6:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ca8:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000caa:	f000 fefd 	bl	8001aa8 <HAL_CAN_Init>
 8000cae:	b900      	cbnz	r0, 8000cb2 <MX_CAN1_Init+0x32>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000cb0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cb2:	f000 fa8d 	bl	80011d0 <Error_Handler>
}
 8000cb6:	e7fb      	b.n	8000cb0 <MX_CAN1_Init+0x30>
 8000cb8:	200000dc 	.word	0x200000dc
 8000cbc:	40006400 	.word	0x40006400

08000cc0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000cc0:	b510      	push	{r4, lr}
 8000cc2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	9303      	str	r3, [sp, #12]
 8000cc8:	9304      	str	r3, [sp, #16]
 8000cca:	9305      	str	r3, [sp, #20]
 8000ccc:	9306      	str	r3, [sp, #24]
 8000cce:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 8000cd0:	6802      	ldr	r2, [r0, #0]
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_CAN_MspInit+0x78>)
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d001      	beq.n	8000cdc <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000cd8:	b008      	add	sp, #32
 8000cda:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cdc:	2400      	movs	r4, #0
 8000cde:	9401      	str	r4, [sp, #4]
 8000ce0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8000ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000cea:	641a      	str	r2, [r3, #64]	; 0x40
 8000cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cee:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000cf2:	9201      	str	r2, [sp, #4]
 8000cf4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	9402      	str	r4, [sp, #8]
 8000cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d1a:	2309      	movs	r3, #9
 8000d1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	a903      	add	r1, sp, #12
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <HAL_CAN_MspInit+0x7c>)
 8000d22:	f001 fcc7 	bl	80026b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d26:	4622      	mov	r2, r4
 8000d28:	4621      	mov	r1, r4
 8000d2a:	2014      	movs	r0, #20
 8000d2c:	f001 fa80 	bl	8002230 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d30:	2014      	movs	r0, #20
 8000d32:	f001 faaf 	bl	8002294 <HAL_NVIC_EnableIRQ>
}
 8000d36:	e7cf      	b.n	8000cd8 <HAL_CAN_MspInit+0x18>
 8000d38:	40006400 	.word	0x40006400
 8000d3c:	40020000 	.word	0x40020000

08000d40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d40:	b500      	push	{lr}
 8000d42:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d44:	2100      	movs	r1, #0
 8000d46:	9101      	str	r1, [sp, #4]
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_DMA_Init+0x30>)
 8000d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d4c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000d50:	631a      	str	r2, [r3, #48]	; 0x30
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	2038      	movs	r0, #56	; 0x38
 8000d60:	f001 fa66 	bl	8002230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d64:	2038      	movs	r0, #56	; 0x38
 8000d66:	f001 fa95 	bl	8002294 <HAL_NVIC_EnableIRQ>

}
 8000d6a:	b003      	add	sp, #12
 8000d6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d70:	40023800 	.word	0x40023800

08000d74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d74:	b530      	push	{r4, r5, lr}
 8000d76:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	2400      	movs	r4, #0
 8000d7a:	9403      	str	r4, [sp, #12]
 8000d7c:	9404      	str	r4, [sp, #16]
 8000d7e:	9405      	str	r4, [sp, #20]
 8000d80:	9406      	str	r4, [sp, #24]
 8000d82:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d84:	9400      	str	r4, [sp, #0]
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <MX_GPIO_Init+0x78>)
 8000d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d8a:	f042 0204 	orr.w	r2, r2, #4
 8000d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8000d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d92:	f002 0204 	and.w	r2, r2, #4
 8000d96:	9200      	str	r2, [sp, #0]
 8000d98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	9401      	str	r4, [sp, #4]
 8000d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000da2:	631a      	str	r2, [r3, #48]	; 0x30
 8000da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000daa:	9201      	str	r2, [sp, #4]
 8000dac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	9402      	str	r4, [sp, #8]
 8000db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	9302      	str	r3, [sp, #8]
 8000dc0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Dir1_Pin|Dir2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000dc2:	4d0b      	ldr	r5, [pc, #44]	; (8000df0 <MX_GPIO_Init+0x7c>)
 8000dc4:	4622      	mov	r2, r4
 8000dc6:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8000dca:	4628      	mov	r0, r5
 8000dcc:	f001 fd6a 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PC9 */
  GPIO_InitStruct.Pin = Dir1_Pin|Dir2_Pin|GPIO_PIN_9;
 8000dd0:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8000dd4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	a903      	add	r1, sp, #12
 8000de0:	4628      	mov	r0, r5
 8000de2:	f001 fc67 	bl	80026b4 <HAL_GPIO_Init>

}
 8000de6:	b009      	add	sp, #36	; 0x24
 8000de8:	bd30      	pop	{r4, r5, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020800 	.word	0x40020800

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b500      	push	{lr}
 8000df6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df8:	2230      	movs	r2, #48	; 0x30
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	a808      	add	r0, sp, #32
 8000dfe:	f002 fc1f 	bl	8003640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e02:	2300      	movs	r3, #0
 8000e04:	9303      	str	r3, [sp, #12]
 8000e06:	9304      	str	r3, [sp, #16]
 8000e08:	9305      	str	r3, [sp, #20]
 8000e0a:	9306      	str	r3, [sp, #24]
 8000e0c:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <SystemClock_Config+0xa4>)
 8000e12:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e14:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000e18:	6411      	str	r1, [r2, #64]	; 0x40
 8000e1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e1c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e20:	9201      	str	r2, [sp, #4]
 8000e22:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e24:	9302      	str	r3, [sp, #8]
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <SystemClock_Config+0xa8>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e42:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	2202      	movs	r2, #2
 8000e46:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e4c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e52:	21a8      	movs	r1, #168	; 0xa8
 8000e54:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e56:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e58:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5a:	a808      	add	r0, sp, #32
 8000e5c:	f001 fd32 	bl	80028c4 <HAL_RCC_OscConfig>
 8000e60:	b9a8      	cbnz	r0, 8000e8e <SystemClock_Config+0x9a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e66:	2302      	movs	r3, #2
 8000e68:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e72:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e78:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e7a:	2105      	movs	r1, #5
 8000e7c:	a803      	add	r0, sp, #12
 8000e7e:	f001 ff8b 	bl	8002d98 <HAL_RCC_ClockConfig>
 8000e82:	b930      	cbnz	r0, 8000e92 <SystemClock_Config+0x9e>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000e84:	f001 ff1c 	bl	8002cc0 <HAL_RCC_EnableCSS>
}
 8000e88:	b015      	add	sp, #84	; 0x54
 8000e8a:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <SystemClock_Config+0x9c>
 8000e92:	b672      	cpsid	i
 8000e94:	e7fe      	b.n	8000e94 <SystemClock_Config+0xa0>
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <HAL_ADC_ConvCpltCallback>:
	adcRead[0] = (adcBuff[0] >> 0)  & 0xFFFF;
 8000ea0:	4906      	ldr	r1, [pc, #24]	; (8000ebc <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ea2:	680a      	ldr	r2, [r1, #0]
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_ADC_ConvCpltCallback+0x20>)
 8000ea6:	801a      	strh	r2, [r3, #0]
	adcRead[1] = (adcBuff[0] >> 16) & 0xFFFF;
 8000ea8:	0c12      	lsrs	r2, r2, #16
 8000eaa:	805a      	strh	r2, [r3, #2]
	adcRead[2] = (adcBuff[1] >> 0)  & 0xFFFF;
 8000eac:	684a      	ldr	r2, [r1, #4]
 8000eae:	809a      	strh	r2, [r3, #4]
	adcRead[3] = (adcBuff[1] >> 16) & 0xFFFF;
 8000eb0:	0c12      	lsrs	r2, r2, #16
 8000eb2:	80da      	strh	r2, [r3, #6]
	adcRead[4] = (adcBuff[2] >> 0)  & 0xFFFF;
 8000eb4:	688a      	ldr	r2, [r1, #8]
 8000eb6:	811a      	strh	r2, [r3, #8]
}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000200 	.word	0x20000200
 8000ec0:	20000184 	.word	0x20000184

08000ec4 <motor_pwm>:
{
 8000ec4:	b538      	push	{r3, r4, r5, lr}
	if (pwm > 0) {
 8000ec6:	1e04      	subs	r4, r0, #0
 8000ec8:	dd12      	ble.n	8000ef0 <motor_pwm+0x2c>
		HAL_GPIO_WritePin(Dir1_GPIO_Port, Dir1_Pin, GPIO_PIN_RESET);
 8000eca:	4d10      	ldr	r5, [pc, #64]	; (8000f0c <motor_pwm+0x48>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed2:	4628      	mov	r0, r5
 8000ed4:	f001 fce6 	bl	80028a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Dir2_GPIO_Port, Dir2_Pin, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ede:	4628      	mov	r0, r5
 8000ee0:	f001 fce0 	bl	80028a4 <HAL_GPIO_WritePin>
	TIM3->CCR1 = abs(pwm);
 8000ee4:	2c00      	cmp	r4, #0
 8000ee6:	bfb8      	it	lt
 8000ee8:	4264      	neglt	r4, r4
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <motor_pwm+0x4c>)
 8000eec:	635c      	str	r4, [r3, #52]	; 0x34
}
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(Dir1_GPIO_Port, Dir1_Pin, GPIO_PIN_SET);
 8000ef0:	4d06      	ldr	r5, [pc, #24]	; (8000f0c <motor_pwm+0x48>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f001 fcd3 	bl	80028a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Dir2_GPIO_Port, Dir2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f04:	4628      	mov	r0, r5
 8000f06:	f001 fccd 	bl	80028a4 <HAL_GPIO_WritePin>
 8000f0a:	e7eb      	b.n	8000ee4 <motor_pwm+0x20>
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40000400 	.word	0x40000400
 8000f14:	00000000 	.word	0x00000000

08000f18 <main>:
{
 8000f18:	b580      	push	{r7, lr}
  HAL_Init();
 8000f1a:	f000 faf1 	bl	8001500 <HAL_Init>
  SystemClock_Config();
 8000f1e:	f7ff ff69 	bl	8000df4 <SystemClock_Config>
  MX_GPIO_Init();
 8000f22:	f7ff ff27 	bl	8000d74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f26:	f7ff ff0b 	bl	8000d40 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f2a:	f7ff fdef 	bl	8000b0c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f2e:	f000 fa55 	bl	80013dc <MX_TIM3_Init>
  MX_CAN1_Init();
 8000f32:	f7ff fea5 	bl	8000c80 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000f36:	f000 f99b 	bl	8001270 <MX_TIM1_Init>
  HAL_ADC_Start_DMA(&hadc1, adcBuff, 5);
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	496c      	ldr	r1, [pc, #432]	; (80010f0 <main+0x1d8>)
 8000f3e:	486d      	ldr	r0, [pc, #436]	; (80010f4 <main+0x1dc>)
 8000f40:	f000 fbcc 	bl	80016dc <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f44:	2100      	movs	r1, #0
 8000f46:	486c      	ldr	r0, [pc, #432]	; (80010f8 <main+0x1e0>)
 8000f48:	f002 fa3e 	bl	80033c8 <HAL_TIM_PWM_Start>
  M_CAN_Filter_Init(&CAN_Rx_Filter, &hcan1);
 8000f4c:	4c6b      	ldr	r4, [pc, #428]	; (80010fc <main+0x1e4>)
 8000f4e:	4621      	mov	r1, r4
 8000f50:	486b      	ldr	r0, [pc, #428]	; (8001100 <main+0x1e8>)
 8000f52:	f7ff fdc3 	bl	8000adc <M_CAN_Filter_Init>
  HAL_CAN_Start(&hcan1);
 8000f56:	4620      	mov	r0, r4
 8000f58:	f000 fece 	bl	8001cf8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f001 f80f 	bl	8001f82 <HAL_CAN_ActivateNotification>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f64:	213c      	movs	r1, #60	; 0x3c
 8000f66:	4867      	ldr	r0, [pc, #412]	; (8001104 <main+0x1ec>)
 8000f68:	f002 faa8 	bl	80034bc <HAL_TIM_Encoder_Start>
  TxMsg.DLC = 8;
 8000f6c:	4b66      	ldr	r3, [pc, #408]	; (8001108 <main+0x1f0>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	611a      	str	r2, [r3, #16]
  TxMsg.ExtId = 0;
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
  TxMsg.IDE = CAN_ID_STD;
 8000f76:	609a      	str	r2, [r3, #8]
  TxMsg.RTR = CAN_RTR_DATA;
 8000f78:	60da      	str	r2, [r3, #12]
  TxMsg.StdId = 0x580 + DeviceID;
 8000f7a:	4a64      	ldr	r2, [pc, #400]	; (800110c <main+0x1f4>)
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	f502 62b0 	add.w	r2, r2, #1408	; 0x580
 8000f82:	601a      	str	r2, [r3, #0]
	  if(HAL_GetTick() - time_fuse > 20)
 8000f84:	4d62      	ldr	r5, [pc, #392]	; (8001110 <main+0x1f8>)
		  speed_encoder = __HAL_TIM_GET_COUNTER(&htim1);
 8000f86:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8001104 <main+0x1ec>
		  Encoder_Scale = Encoder_Jarak  * 0.001;
 8000f8a:	a757      	add	r7, pc, #348	; (adr r7, 80010e8 <main+0x1d0>)
 8000f8c:	e9d7 6700 	ldrd	r6, r7, [r7]
	  if(HAL_GetTick()-timeS>=200)
 8000f90:	4c60      	ldr	r4, [pc, #384]	; (8001114 <main+0x1fc>)
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000f92:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001140 <main+0x228>
 8000f96:	e095      	b.n	80010c4 <main+0x1ac>
		  time_fuse = HAL_GetTick();
 8000f98:	f000 fad8 	bl	800154c <HAL_GetTick>
 8000f9c:	6028      	str	r0, [r5, #0]
		  speed_encoder = __HAL_TIM_GET_COUNTER(&htim1);
 8000f9e:	f8d9 3000 	ldr.w	r3, [r9]
 8000fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa4:	b212      	sxth	r2, r2
 8000fa6:	4b5c      	ldr	r3, [pc, #368]	; (8001118 <main+0x200>)
 8000fa8:	801a      	strh	r2, [r3, #0]
		  TIM1->CNT = 0;
 8000faa:	4b5c      	ldr	r3, [pc, #368]	; (800111c <main+0x204>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	6259      	str	r1, [r3, #36]	; 0x24
		  Encoder_Jarak += speed_encoder;
 8000fb0:	f8df c188 	ldr.w	ip, [pc, #392]	; 800113c <main+0x224>
 8000fb4:	b212      	sxth	r2, r2
 8000fb6:	17d3      	asrs	r3, r2, #31
 8000fb8:	f8dc 0000 	ldr.w	r0, [ip]
 8000fbc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8000fc0:	1810      	adds	r0, r2, r0
 8000fc2:	eb43 0101 	adc.w	r1, r3, r1
 8000fc6:	f8cc 0000 	str.w	r0, [ip]
 8000fca:	f8cc 1004 	str.w	r1, [ip, #4]
		  Encoder_Scale = Encoder_Jarak  * 0.001;
 8000fce:	f7ff fbb3 	bl	8000738 <__aeabi_l2d>
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	f7ff f8f7 	bl	80001c8 <__aeabi_dmul>
 8000fda:	f7ff fbdb 	bl	8000794 <__aeabi_d2iz>
 8000fde:	b200      	sxth	r0, r0
 8000fe0:	4b4f      	ldr	r3, [pc, #316]	; (8001120 <main+0x208>)
 8000fe2:	8018      	strh	r0, [r3, #0]
		  if(status_kalib==0)
 8000fe4:	4b4f      	ldr	r3, [pc, #316]	; (8001124 <main+0x20c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b1f3      	cbz	r3, 8001028 <main+0x110>
		  else if(status_kalib == 1)
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d171      	bne.n	80010d2 <main+0x1ba>
			  if(Kalib_CAN == 1)
 8000fee:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <main+0x210>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d03c      	beq.n	8001070 <main+0x158>
			  if(Encoder_Scale > 1650)
 8000ff6:	f240 6372 	movw	r3, #1650	; 0x672
 8000ffa:	4298      	cmp	r0, r3
 8000ffc:	dd3f      	ble.n	800107e <main+0x166>
				  if(PWM_CAN>0)
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	; (800112c <main+0x214>)
 8001000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001004:	2b00      	cmp	r3, #0
 8001006:	dd37      	ble.n	8001078 <main+0x160>
					  PWM_out = 0;
 8001008:	4b49      	ldr	r3, [pc, #292]	; (8001130 <main+0x218>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
			  if(PWM_out>pwmMax)
 800100e:	4b48      	ldr	r3, [pc, #288]	; (8001130 <main+0x218>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b48      	ldr	r3, [pc, #288]	; (8001134 <main+0x21c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	dd46      	ble.n	80010a8 <main+0x190>
				  PWM_out = pwmMax;
 800101a:	4a45      	ldr	r2, [pc, #276]	; (8001130 <main+0x218>)
 800101c:	6013      	str	r3, [r2, #0]
			  motor_pwm(PWM_out);
 800101e:	4b44      	ldr	r3, [pc, #272]	; (8001130 <main+0x218>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	f7ff ff4f 	bl	8000ec4 <motor_pwm>
 8001026:	e054      	b.n	80010d2 <main+0x1ba>
			  motor_pwm(-100);
 8001028:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800102c:	f7ff ff4a 	bl	8000ec4 <motor_pwm>
			  if(abs(speed_encoder)<50)
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <main+0x200>)
 8001032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001036:	2b00      	cmp	r3, #0
 8001038:	bfb8      	it	lt
 800103a:	425b      	neglt	r3, r3
 800103c:	b29b      	uxth	r3, r3
 800103e:	2b31      	cmp	r3, #49	; 0x31
 8001040:	d84e      	bhi.n	80010e0 <main+0x1c8>
				  cnt_kalib++;
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <main+0x220>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	b2db      	uxtb	r3, r3
			  if(cnt_kalib>50)
 800104a:	2b32      	cmp	r3, #50	; 0x32
 800104c:	d90d      	bls.n	800106a <main+0x152>
				  cnt_kalib=0;
 800104e:	2000      	movs	r0, #0
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <main+0x220>)
 8001052:	7018      	strb	r0, [r3, #0]
				  status_kalib=1;
 8001054:	4b33      	ldr	r3, [pc, #204]	; (8001124 <main+0x20c>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
				  Encoder_Jarak = 0;
 800105a:	4938      	ldr	r1, [pc, #224]	; (800113c <main+0x224>)
 800105c:	2200      	movs	r2, #0
 800105e:	2300      	movs	r3, #0
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
				  motor_pwm(0);
 8001064:	f7ff ff2e 	bl	8000ec4 <motor_pwm>
 8001068:	e033      	b.n	80010d2 <main+0x1ba>
 800106a:	4a33      	ldr	r2, [pc, #204]	; (8001138 <main+0x220>)
 800106c:	7013      	strb	r3, [r2, #0]
 800106e:	e030      	b.n	80010d2 <main+0x1ba>
				  status_kalib = 0;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <main+0x20c>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e7be      	b.n	8000ff6 <main+0xde>
					  PWM_out = PWM_CAN;
 8001078:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <main+0x218>)
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e7c7      	b.n	800100e <main+0xf6>
			  else if(Encoder_Scale < -10)
 800107e:	f110 0f0a 	cmn.w	r0, #10
 8001082:	da0b      	bge.n	800109c <main+0x184>
				  if(PWM_CAN<0)
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <main+0x214>)
 8001086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db02      	blt.n	8001094 <main+0x17c>
					  PWM_out = PWM_CAN;
 800108e:	4a28      	ldr	r2, [pc, #160]	; (8001130 <main+0x218>)
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e7bc      	b.n	800100e <main+0xf6>
					  PWM_out = 0;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <main+0x218>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e7b8      	b.n	800100e <main+0xf6>
				  PWM_out = PWM_CAN;
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <main+0x214>)
 800109e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <main+0x218>)
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e7b2      	b.n	800100e <main+0xf6>
			  else if(PWM_out<-pwmMax)
 80010a8:	425b      	negs	r3, r3
 80010aa:	429a      	cmp	r2, r3
				  PWM_out = -pwmMax;
 80010ac:	bfbc      	itt	lt
 80010ae:	4a20      	ldrlt	r2, [pc, #128]	; (8001130 <main+0x218>)
 80010b0:	6013      	strlt	r3, [r2, #0]
 80010b2:	e7b4      	b.n	800101e <main+0x106>
		  timeS = HAL_GetTick();
 80010b4:	f000 fa4a 	bl	800154c <HAL_GetTick>
 80010b8:	6020      	str	r0, [r4, #0]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80010ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010be:	4640      	mov	r0, r8
 80010c0:	f001 fbf6 	bl	80028b0 <HAL_GPIO_TogglePin>
	  if(HAL_GetTick() - time_fuse > 20)
 80010c4:	f000 fa42 	bl	800154c <HAL_GetTick>
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	1ac0      	subs	r0, r0, r3
 80010cc:	2814      	cmp	r0, #20
 80010ce:	f63f af63 	bhi.w	8000f98 <main+0x80>
	  if(HAL_GetTick()-timeS>=200)
 80010d2:	f000 fa3b 	bl	800154c <HAL_GetTick>
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	1ac0      	subs	r0, r0, r3
 80010da:	28c7      	cmp	r0, #199	; 0xc7
 80010dc:	d9f2      	bls.n	80010c4 <main+0x1ac>
 80010de:	e7e9      	b.n	80010b4 <main+0x19c>
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <main+0x220>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
			  if(cnt_kalib>50)
 80010e6:	e7f4      	b.n	80010d2 <main+0x1ba>
 80010e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80010ec:	3f50624d 	.word	0x3f50624d
 80010f0:	20000200 	.word	0x20000200
 80010f4:	20000034 	.word	0x20000034
 80010f8:	20000218 	.word	0x20000218
 80010fc:	200000dc 	.word	0x200000dc
 8001100:	2000010c 	.word	0x2000010c
 8001104:	20000260 	.word	0x20000260
 8001108:	200001e4 	.word	0x200001e4
 800110c:	20000000 	.word	0x20000000
 8001110:	200001a8 	.word	0x200001a8
 8001114:	2000017c 	.word	0x2000017c
 8001118:	20000136 	.word	0x20000136
 800111c:	40010000 	.word	0x40010000
 8001120:	200001b4 	.word	0x200001b4
 8001124:	200001b8 	.word	0x200001b8
 8001128:	2000019c 	.word	0x2000019c
 800112c:	20000190 	.word	0x20000190
 8001130:	200001bc 	.word	0x200001bc
 8001134:	20000004 	.word	0x20000004
 8001138:	200001b9 	.word	0x200001b9
 800113c:	20000158 	.word	0x20000158
 8001140:	40020800 	.word	0x40020800

08001144 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8001144:	b538      	push	{r3, r4, r5, lr}
	if(hcan->Instance == CAN1)
 8001146:	6802      	ldr	r2, [r0, #0]
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800114a:	429a      	cmp	r2, r3
 800114c:	d000      	beq.n	8001150 <HAL_CAN_RxFifo0MsgPendingCallback+0xc>
}
 800114e:	bd38      	pop	{r3, r4, r5, pc}
 8001150:	4604      	mov	r4, r0
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMsg, CAN_RxData);
 8001152:	4d15      	ldr	r5, [pc, #84]	; (80011a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001156:	462a      	mov	r2, r5
 8001158:	2100      	movs	r1, #0
 800115a:	f000 fe75 	bl	8001e48 <HAL_CAN_GetRxMessage>
		if(RxMsg.StdId == DeviceID+0x600)
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001166:	682a      	ldr	r2, [r5, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d1f0      	bne.n	800114e <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
			if(CAN_RxData[0]==0)
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d1ec      	bne.n	800114e <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
				memcpy(&PWM_CAN,CAN_RxData+1,2);
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001176:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800117c:	8011      	strh	r1, [r2, #0]
				Kalib_CAN = CAN_RxData[2];
 800117e:	789a      	ldrb	r2, [r3, #2]
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001182:	701a      	strb	r2, [r3, #0]
				memset(CAN_TxData,0,8);
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001186:	2300      	movs	r3, #0
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	6053      	str	r3, [r2, #4]
				memcpy(CAN_TxData,&status_kalib,1);
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	7013      	strb	r3, [r2, #0]
				memcpy(CAN_TxData+2,&Encoder_Scale,2);
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	8053      	strh	r3, [r2, #2]
				HAL_CAN_AddTxMessage(hcan, &TxMsg, CAN_TxData, &TxMailbox);
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800119a:	490c      	ldr	r1, [pc, #48]	; (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800119c:	4620      	mov	r0, r4
 800119e:	f000 fdd9 	bl	8001d54 <HAL_CAN_AddTxMessage>
}
 80011a2:	e7d4      	b.n	800114e <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
 80011a4:	40006400 	.word	0x40006400
 80011a8:	200001c0 	.word	0x200001c0
 80011ac:	20000144 	.word	0x20000144
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000190 	.word	0x20000190
 80011b8:	2000019c 	.word	0x2000019c
 80011bc:	200001a0 	.word	0x200001a0
 80011c0:	200001b8 	.word	0x200001b8
 80011c4:	200001b4 	.word	0x200001b4
 80011c8:	200001ac 	.word	0x200001ac
 80011cc:	200001e4 	.word	0x200001e4

080011d0 <Error_Handler>:
 80011d0:	b672      	cpsid	i
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <Error_Handler+0x2>

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2100      	movs	r1, #0
 80011d8:	9100      	str	r1, [sp, #0]
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_MspInit+0x34>)
 80011dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011e2:	645a      	str	r2, [r3, #68]	; 0x44
 80011e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011e6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011ea:	9200      	str	r2, [sp, #0]
 80011ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	9101      	str	r1, [sp, #4]
 80011f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	b002      	add	sp, #8
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800120e:	f001 fe77 	bl	8002f00 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <NMI_Handler+0x6>

08001214 <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

	TIM3->CCR1 = 0;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HardFault_Handler+0x10>)
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  TIM3->CCR1 = 0;
 800121a:	461a      	mov	r2, r3
 800121c:	2300      	movs	r3, #0
 800121e:	6353      	str	r3, [r2, #52]	; 0x34
  while (1)
 8001220:	e7fd      	b.n	800121e <HardFault_Handler+0xa>
 8001222:	bf00      	nop
 8001224:	40000400 	.word	0x40000400

08001228 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler>

0800122a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler>

0800122c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler>

0800122e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f97d 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bd08      	pop	{r3, pc}

0800123c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800123c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800123e:	4802      	ldr	r0, [pc, #8]	; (8001248 <CAN1_RX0_IRQHandler+0xc>)
 8001240:	f000 febd 	bl	8001fbe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001244:	bd08      	pop	{r3, pc}
 8001246:	bf00      	nop
 8001248:	200000dc 	.word	0x200000dc

0800124c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800124c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800124e:	4802      	ldr	r0, [pc, #8]	; (8001258 <DMA2_Stream0_IRQHandler+0xc>)
 8001250:	f001 f942 	bl	80024d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001254:	bd08      	pop	{r3, pc}
 8001256:	bf00      	nop
 8001258:	2000007c 	.word	0x2000007c

0800125c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <SystemInit+0x10>)
 800125e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001262:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001266:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001270:	b500      	push	{lr}
 8001272:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	2300      	movs	r3, #0
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127a:	4816      	ldr	r0, [pc, #88]	; (80012d4 <MX_TIM1_Init+0x64>)
 800127c:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <MX_TIM1_Init+0x68>)
 800127e:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001280:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8001284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001288:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800128c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001290:	2203      	movs	r2, #3
 8001292:	9203      	str	r2, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001294:	2202      	movs	r2, #2
 8001296:	9204      	str	r2, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001298:	2101      	movs	r1, #1
 800129a:	9105      	str	r1, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800129c:	9306      	str	r3, [sp, #24]
  sConfig.IC1Filter = 5;
 800129e:	2205      	movs	r2, #5
 80012a0:	9207      	str	r2, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012a2:	9308      	str	r3, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012a4:	9109      	str	r1, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012a6:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.IC2Filter = 5;
 80012a8:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012aa:	a903      	add	r1, sp, #12
 80012ac:	f001 ff7e 	bl	80031ac <HAL_TIM_Encoder_Init>
 80012b0:	b950      	cbnz	r0, 80012c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b8:	a901      	add	r1, sp, #4
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <MX_TIM1_Init+0x64>)
 80012bc:	f002 f958 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	b928      	cbnz	r0, 80012ce <MX_TIM1_Init+0x5e>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012c2:	b00d      	add	sp, #52	; 0x34
 80012c4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012c8:	f7ff ff82 	bl	80011d0 <Error_Handler>
 80012cc:	e7f1      	b.n	80012b2 <MX_TIM1_Init+0x42>
    Error_Handler();
 80012ce:	f7ff ff7f 	bl	80011d0 <Error_Handler>
}
 80012d2:	e7f6      	b.n	80012c2 <MX_TIM1_Init+0x52>
 80012d4:	20000260 	.word	0x20000260
 80012d8:	40010000 	.word	0x40010000

080012dc <HAL_TIM_Encoder_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80012dc:	b500      	push	{lr}
 80012de:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	2300      	movs	r3, #0
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	9304      	str	r3, [sp, #16]
 80012e6:	9305      	str	r3, [sp, #20]
 80012e8:	9306      	str	r3, [sp, #24]
 80012ea:	9307      	str	r3, [sp, #28]
  if(tim_encoderHandle->Instance==TIM1)
 80012ec:	6802      	ldr	r2, [r0, #0]
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_TIM_Encoder_MspInit+0x6c>)
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d002      	beq.n	80012fa <HAL_TIM_Encoder_MspInit+0x1e>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012f4:	b009      	add	sp, #36	; 0x24
 80012f6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012fa:	2100      	movs	r1, #0
 80012fc:	9101      	str	r1, [sp, #4]
 80012fe:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
 800130a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800130c:	f002 0201 	and.w	r2, r2, #1
 8001310:	9201      	str	r2, [sp, #4]
 8001312:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	9102      	str	r1, [sp, #8]
 8001316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001328:	f44f 7340 	mov.w	r3, #768	; 0x300
 800132c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001332:	2301      	movs	r3, #1
 8001334:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2203      	movs	r2, #3
 8001338:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800133a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	a903      	add	r1, sp, #12
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <HAL_TIM_Encoder_MspInit+0x70>)
 8001340:	f001 f9b8 	bl	80026b4 <HAL_GPIO_Init>
}
 8001344:	e7d6      	b.n	80012f4 <HAL_TIM_Encoder_MspInit+0x18>
 8001346:	bf00      	nop
 8001348:	40010000 	.word	0x40010000
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8001350:	6802      	ldr	r2, [r0, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_TIM_PWM_MspInit+0x28>)
 8001354:	429a      	cmp	r2, r3
 8001356:	d000      	beq.n	800135a <HAL_TIM_PWM_MspInit+0xa>
 8001358:	4770      	bx	lr
{
 800135a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_TIM_PWM_MspInit+0x2c>)
 8001362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001364:	f042 0202 	orr.w	r2, r2, #2
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001374:	b002      	add	sp, #8
 8001376:	4770      	bx	lr
 8001378:	40000400 	.word	0x40000400
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001380:	b500      	push	{lr}
 8001382:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	2300      	movs	r3, #0
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	9303      	str	r3, [sp, #12]
 800138c:	9304      	str	r3, [sp, #16]
 800138e:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8001390:	6802      	ldr	r2, [r0, #0]
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_TIM_MspPostInit+0x50>)
 8001394:	429a      	cmp	r2, r3
 8001396:	d002      	beq.n	800139e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001398:	b007      	add	sp, #28
 800139a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <HAL_TIM_MspPostInit+0x54>)
 80013a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80013a6:	f041 0101 	orr.w	r1, r1, #1
 80013aa:	6311      	str	r1, [r2, #48]	; 0x30
 80013ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013ae:	f002 0201 	and.w	r2, r2, #1
 80013b2:	9200      	str	r2, [sp, #0]
 80013b4:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2202      	movs	r2, #2
 80013bc:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013c2:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	a901      	add	r1, sp, #4
 80013c6:	4804      	ldr	r0, [pc, #16]	; (80013d8 <HAL_TIM_MspPostInit+0x58>)
 80013c8:	f001 f974 	bl	80026b4 <HAL_GPIO_Init>
}
 80013cc:	e7e4      	b.n	8001398 <HAL_TIM_MspPostInit+0x18>
 80013ce:	bf00      	nop
 80013d0:	40000400 	.word	0x40000400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000

080013dc <MX_TIM3_Init>:
{
 80013dc:	b500      	push	{lr}
 80013de:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	2300      	movs	r3, #0
 80013e2:	9308      	str	r3, [sp, #32]
 80013e4:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	9303      	str	r3, [sp, #12]
 80013ec:	9304      	str	r3, [sp, #16]
 80013ee:	9305      	str	r3, [sp, #20]
 80013f0:	9306      	str	r3, [sp, #24]
 80013f2:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80013f4:	4818      	ldr	r0, [pc, #96]	; (8001458 <MX_TIM3_Init+0x7c>)
 80013f6:	4a19      	ldr	r2, [pc, #100]	; (800145c <MX_TIM3_Init+0x80>)
 80013f8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 19;
 80013fa:	2213      	movs	r2, #19
 80013fc:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 500;
 8001400:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001404:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800140a:	f001 fea3 	bl	8003154 <HAL_TIM_PWM_Init>
 800140e:	b9d0      	cbnz	r0, 8001446 <MX_TIM3_Init+0x6a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001416:	a908      	add	r1, sp, #32
 8001418:	480f      	ldr	r0, [pc, #60]	; (8001458 <MX_TIM3_Init+0x7c>)
 800141a:	f002 f8a9 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	b9a8      	cbnz	r0, 800144c <MX_TIM3_Init+0x70>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001420:	2360      	movs	r3, #96	; 0x60
 8001422:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001424:	2200      	movs	r2, #0
 8001426:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001428:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800142a:	2304      	movs	r3, #4
 800142c:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142e:	eb0d 0103 	add.w	r1, sp, r3
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <MX_TIM3_Init+0x7c>)
 8001434:	f001 ff4a 	bl	80032cc <HAL_TIM_PWM_ConfigChannel>
 8001438:	b958      	cbnz	r0, 8001452 <MX_TIM3_Init+0x76>
  HAL_TIM_MspPostInit(&htim3);
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <MX_TIM3_Init+0x7c>)
 800143c:	f7ff ffa0 	bl	8001380 <HAL_TIM_MspPostInit>
}
 8001440:	b00b      	add	sp, #44	; 0x2c
 8001442:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001446:	f7ff fec3 	bl	80011d0 <Error_Handler>
 800144a:	e7e1      	b.n	8001410 <MX_TIM3_Init+0x34>
    Error_Handler();
 800144c:	f7ff fec0 	bl	80011d0 <Error_Handler>
 8001450:	e7e6      	b.n	8001420 <MX_TIM3_Init+0x44>
    Error_Handler();
 8001452:	f7ff febd 	bl	80011d0 <Error_Handler>
 8001456:	e7f0      	b.n	800143a <MX_TIM3_Init+0x5e>
 8001458:	20000218 	.word	0x20000218
 800145c:	40000400 	.word	0x40000400

08001460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001498 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480d      	ldr	r0, [pc, #52]	; (800149c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001466:	490e      	ldr	r1, [pc, #56]	; (80014a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800147c:	4c0b      	ldr	r4, [pc, #44]	; (80014ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800148a:	f7ff fee7 	bl	800125c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f002 f8b3 	bl	80035f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001492:	f7ff fd41 	bl	8000f18 <main>
  bx  lr    
 8001496:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001498:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80014a4:	08003690 	.word	0x08003690
  ldr r2, =_sbss
 80014a8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80014ac:	200002ac 	.word	0x200002ac

080014b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC_IRQHandler>
	...

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_InitTick+0x40>)
 80014ba:	7818      	ldrb	r0, [r3, #0]
 80014bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80014c4:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <HAL_InitTick+0x44>)
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80014cc:	f000 fef0 	bl	80022b0 <HAL_SYSTICK_Config>
 80014d0:	b968      	cbnz	r0, 80014ee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	2c0f      	cmp	r4, #15
 80014d4:	d901      	bls.n	80014da <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
 80014d8:	e00a      	b.n	80014f0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014da:	2200      	movs	r2, #0
 80014dc:	4621      	mov	r1, r4
 80014de:	f04f 30ff 	mov.w	r0, #4294967295
 80014e2:	f000 fea5 	bl	8002230 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_InitTick+0x48>)
 80014e8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
}
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	bf00      	nop
 80014f4:	2000000c 	.word	0x2000000c
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000010 	.word	0x20000010

08001500 <HAL_Init>:
{
 8001500:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_Init+0x30>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800150a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800151a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 fe75 	bl	800220c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	200f      	movs	r0, #15
 8001524:	f7ff ffc6 	bl	80014b4 <HAL_InitTick>
  HAL_MspInit();
 8001528:	f7ff fe54 	bl	80011d4 <HAL_MspInit>
}
 800152c:	2000      	movs	r0, #0
 800152e:	bd08      	pop	{r3, pc}
 8001530:	40023c00 	.word	0x40023c00

08001534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_IncTick+0x10>)
 8001536:	6811      	ldr	r1, [r2, #0]
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_IncTick+0x14>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	440b      	add	r3, r1
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200002a8 	.word	0x200002a8
 8001548:	2000000c 	.word	0x2000000c

0800154c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800154c:	4b01      	ldr	r3, [pc, #4]	; (8001554 <HAL_GetTick+0x8>)
 800154e:	6818      	ldr	r0, [r3, #0]
}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200002a8 	.word	0x200002a8

08001558 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001558:	2800      	cmp	r0, #0
 800155a:	f000 80b9 	beq.w	80016d0 <HAL_ADC_Init+0x178>
{
 800155e:	b510      	push	{r4, lr}
 8001560:	4604      	mov	r4, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001562:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001564:	b143      	cbz	r3, 8001578 <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001568:	f013 0f10 	tst.w	r3, #16
 800156c:	d00b      	beq.n	8001586 <HAL_ADC_Init+0x2e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800156e:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001570:	2300      	movs	r3, #0
 8001572:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8001576:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001578:	f7ff fb2c 	bl	8000bd4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800157c:	2300      	movs	r3, #0
 800157e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001580:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001584:	e7ef      	b.n	8001566 <HAL_ADC_Init+0xe>
    ADC_STATE_CLR_SET(hadc->State,
 8001586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001588:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800158c:	f023 0302 	bic.w	r3, r3, #2
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001596:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <HAL_ADC_Init+0x17c>)
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800159e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	6861      	ldr	r1, [r4, #4]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015a8:	6822      	ldr	r2, [r4, #0]
 80015aa:	6853      	ldr	r3, [r2, #4]
 80015ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015b2:	6822      	ldr	r2, [r4, #0]
 80015b4:	6853      	ldr	r3, [r2, #4]
 80015b6:	6921      	ldr	r1, [r4, #16]
 80015b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015bc:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015be:	6822      	ldr	r2, [r4, #0]
 80015c0:	6853      	ldr	r3, [r2, #4]
 80015c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80015c6:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015c8:	6822      	ldr	r2, [r4, #0]
 80015ca:	6853      	ldr	r3, [r2, #4]
 80015cc:	68a1      	ldr	r1, [r4, #8]
 80015ce:	430b      	orrs	r3, r1
 80015d0:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015d2:	6822      	ldr	r2, [r4, #0]
 80015d4:	6893      	ldr	r3, [r2, #8]
 80015d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015da:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015dc:	6822      	ldr	r2, [r4, #0]
 80015de:	6893      	ldr	r3, [r2, #8]
 80015e0:	68e1      	ldr	r1, [r4, #12]
 80015e2:	430b      	orrs	r3, r1
 80015e4:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015e8:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <HAL_ADC_Init+0x180>)
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d05f      	beq.n	80016ae <HAL_ADC_Init+0x156>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	6893      	ldr	r3, [r2, #8]
 80015f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80015f6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015f8:	6822      	ldr	r2, [r4, #0]
 80015fa:	6893      	ldr	r3, [r2, #8]
 80015fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80015fe:	430b      	orrs	r3, r1
 8001600:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001602:	6822      	ldr	r2, [r4, #0]
 8001604:	6893      	ldr	r3, [r2, #8]
 8001606:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800160a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800160c:	6822      	ldr	r2, [r4, #0]
 800160e:	6893      	ldr	r3, [r2, #8]
 8001610:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001612:	430b      	orrs	r3, r1
 8001614:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001616:	6822      	ldr	r2, [r4, #0]
 8001618:	6893      	ldr	r3, [r2, #8]
 800161a:	f023 0302 	bic.w	r3, r3, #2
 800161e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001620:	6822      	ldr	r2, [r4, #0]
 8001622:	6893      	ldr	r3, [r2, #8]
 8001624:	7e21      	ldrb	r1, [r4, #24]
 8001626:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800162a:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800162c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d047      	beq.n	80016c4 <HAL_ADC_Init+0x16c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	6853      	ldr	r3, [r2, #4]
 8001638:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800163c:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800163e:	6822      	ldr	r2, [r4, #0]
 8001640:	6853      	ldr	r3, [r2, #4]
 8001642:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001646:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001648:	6821      	ldr	r1, [r4, #0]
 800164a:	684b      	ldr	r3, [r1, #4]
 800164c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800164e:	3a01      	subs	r2, #1
 8001650:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001654:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800165a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800165e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001660:	6821      	ldr	r1, [r4, #0]
 8001662:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001664:	69e2      	ldr	r2, [r4, #28]
 8001666:	3a01      	subs	r2, #1
 8001668:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800166c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800166e:	6822      	ldr	r2, [r4, #0]
 8001670:	6893      	ldr	r3, [r2, #8]
 8001672:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001676:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001678:	6822      	ldr	r2, [r4, #0]
 800167a:	6893      	ldr	r3, [r2, #8]
 800167c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001680:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001684:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001686:	6822      	ldr	r2, [r4, #0]
 8001688:	6893      	ldr	r3, [r2, #8]
 800168a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800168e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	6893      	ldr	r3, [r2, #8]
 8001694:	6961      	ldr	r1, [r4, #20]
 8001696:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800169a:	6093      	str	r3, [r2, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800169c:	2000      	movs	r0, #0
 800169e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80016a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6423      	str	r3, [r4, #64]	; 0x40
 80016ac:	e760      	b.n	8001570 <HAL_ADC_Init+0x18>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ae:	6822      	ldr	r2, [r4, #0]
 80016b0:	6893      	ldr	r3, [r2, #8]
 80016b2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80016b6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016b8:	6822      	ldr	r2, [r4, #0]
 80016ba:	6893      	ldr	r3, [r2, #8]
 80016bc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80016c0:	6093      	str	r3, [r2, #8]
 80016c2:	e7a8      	b.n	8001616 <HAL_ADC_Init+0xbe>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016c4:	6822      	ldr	r2, [r4, #0]
 80016c6:	6853      	ldr	r3, [r2, #4]
 80016c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016cc:	6053      	str	r3, [r2, #4]
 80016ce:	e7c2      	b.n	8001656 <HAL_ADC_Init+0xfe>
    return HAL_ERROR;
 80016d0:	2001      	movs	r0, #1
}
 80016d2:	4770      	bx	lr
 80016d4:	40012300 	.word	0x40012300
 80016d8:	0f000001 	.word	0x0f000001

080016dc <HAL_ADC_Start_DMA>:
{
 80016dc:	b510      	push	{r4, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80016e2:	2200      	movs	r2, #0
 80016e4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80016e6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80016ea:	2a01      	cmp	r2, #1
 80016ec:	f000 80ae 	beq.w	800184c <HAL_ADC_Start_DMA+0x170>
 80016f0:	4604      	mov	r4, r0
 80016f2:	2201      	movs	r2, #1
 80016f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016f8:	6802      	ldr	r2, [r0, #0]
 80016fa:	6890      	ldr	r0, [r2, #8]
 80016fc:	f010 0f01 	tst.w	r0, #1
 8001700:	d114      	bne.n	800172c <HAL_ADC_Start_DMA+0x50>
    __HAL_ADC_ENABLE(hadc);
 8001702:	6890      	ldr	r0, [r2, #8]
 8001704:	f040 0001 	orr.w	r0, r0, #1
 8001708:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800170a:	4a54      	ldr	r2, [pc, #336]	; (800185c <HAL_ADC_Start_DMA+0x180>)
 800170c:	6810      	ldr	r0, [r2, #0]
 800170e:	4a54      	ldr	r2, [pc, #336]	; (8001860 <HAL_ADC_Start_DMA+0x184>)
 8001710:	fba2 2000 	umull	r2, r0, r2, r0
 8001714:	0c80      	lsrs	r0, r0, #18
 8001716:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800171a:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 800171c:	9a01      	ldr	r2, [sp, #4]
 800171e:	b12a      	cbz	r2, 800172c <HAL_ADC_Start_DMA+0x50>
      counter--;
 8001720:	9801      	ldr	r0, [sp, #4]
 8001722:	3801      	subs	r0, #1
 8001724:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001726:	9801      	ldr	r0, [sp, #4]
 8001728:	2800      	cmp	r0, #0
 800172a:	d1f9      	bne.n	8001720 <HAL_ADC_Start_DMA+0x44>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800172c:	6822      	ldr	r2, [r4, #0]
 800172e:	6890      	ldr	r0, [r2, #8]
 8001730:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001734:	d003      	beq.n	800173e <HAL_ADC_Start_DMA+0x62>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001736:	6890      	ldr	r0, [r2, #8]
 8001738:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800173c:	6090      	str	r0, [r2, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	6890      	ldr	r0, [r2, #8]
 8001742:	f010 0f01 	tst.w	r0, #1
 8001746:	d076      	beq.n	8001836 <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 8001748:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800174a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800174e:	f020 0001 	bic.w	r0, r0, #1
 8001752:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001756:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001758:	6852      	ldr	r2, [r2, #4]
 800175a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800175e:	d005      	beq.n	800176c <HAL_ADC_Start_DMA+0x90>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001760:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001762:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800176a:	6422      	str	r2, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800176c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800176e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001772:	bf1a      	itte	ne
 8001774:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8001776:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800177a:	2200      	moveq	r2, #0
 800177c:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 800177e:	2200      	movs	r2, #0
 8001780:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001784:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001786:	4837      	ldr	r0, [pc, #220]	; (8001864 <HAL_ADC_Start_DMA+0x188>)
 8001788:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800178a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800178c:	4836      	ldr	r0, [pc, #216]	; (8001868 <HAL_ADC_Start_DMA+0x18c>)
 800178e:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001790:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001792:	4836      	ldr	r0, [pc, #216]	; (800186c <HAL_ADC_Start_DMA+0x190>)
 8001794:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800179c:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800179e:	6820      	ldr	r0, [r4, #0]
 80017a0:	6842      	ldr	r2, [r0, #4]
 80017a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80017a6:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80017a8:	6820      	ldr	r0, [r4, #0]
 80017aa:	6882      	ldr	r2, [r0, #8]
 80017ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017b0:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017b2:	6820      	ldr	r0, [r4, #0]
 80017b4:	460a      	mov	r2, r1
 80017b6:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 80017ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017bc:	f000 fe46 	bl	800244c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017c0:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <HAL_ADC_Start_DMA+0x194>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f013 0f1f 	tst.w	r3, #31
 80017c8:	d124      	bne.n	8001814 <HAL_ADC_Start_DMA+0x138>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	4a29      	ldr	r2, [pc, #164]	; (8001874 <HAL_ADC_Start_DMA+0x198>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d016      	beq.n	8001800 <HAL_ADC_Start_DMA+0x124>
 80017d2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d004      	beq.n	80017e4 <HAL_ADC_Start_DMA+0x108>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <HAL_ADC_Start_DMA+0x19c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d009      	beq.n	80017f4 <HAL_ADC_Start_DMA+0x118>
  return HAL_OK;
 80017e0:	2000      	movs	r0, #0
 80017e2:	e031      	b.n	8001848 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017e4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80017e8:	6852      	ldr	r2, [r2, #4]
 80017ea:	f012 0f1f 	tst.w	r2, #31
 80017ee:	d007      	beq.n	8001800 <HAL_ADC_Start_DMA+0x124>
  return HAL_OK;
 80017f0:	2000      	movs	r0, #0
 80017f2:	e029      	b.n	8001848 <HAL_ADC_Start_DMA+0x16c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017f4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80017f8:	6852      	ldr	r2, [r2, #4]
 80017fa:	f012 0f10 	tst.w	r2, #16
 80017fe:	d127      	bne.n	8001850 <HAL_ADC_Start_DMA+0x174>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001806:	d125      	bne.n	8001854 <HAL_ADC_Start_DMA+0x178>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800180e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001810:	2000      	movs	r0, #0
 8001812:	e019      	b.n	8001848 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001814:	6822      	ldr	r2, [r4, #0]
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_ADC_Start_DMA+0x198>)
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_ADC_Start_DMA+0x144>
  return HAL_OK;
 800181c:	2000      	movs	r0, #0
 800181e:	e013      	b.n	8001848 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8001826:	d117      	bne.n	8001858 <HAL_ADC_Start_DMA+0x17c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_ADC_Start_DMA+0x198>)
 800182a:	6893      	ldr	r3, [r2, #8]
 800182c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001830:	6093      	str	r3, [r2, #8]
  return HAL_OK;
 8001832:	2000      	movs	r0, #0
 8001834:	e008      	b.n	8001848 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8001846:	2000      	movs	r0, #0
}
 8001848:	b002      	add	sp, #8
 800184a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800184c:	2002      	movs	r0, #2
 800184e:	e7fb      	b.n	8001848 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 8001850:	2000      	movs	r0, #0
 8001852:	e7f9      	b.n	8001848 <HAL_ADC_Start_DMA+0x16c>
 8001854:	2000      	movs	r0, #0
 8001856:	e7f7      	b.n	8001848 <HAL_ADC_Start_DMA+0x16c>
 8001858:	2000      	movs	r0, #0
 800185a:	e7f5      	b.n	8001848 <HAL_ADC_Start_DMA+0x16c>
 800185c:	20000008 	.word	0x20000008
 8001860:	431bde83 	.word	0x431bde83
 8001864:	080018a1 	.word	0x080018a1
 8001868:	0800187f 	.word	0x0800187f
 800186c:	0800188b 	.word	0x0800188b
 8001870:	40012300 	.word	0x40012300
 8001874:	40012000 	.word	0x40012000
 8001878:	40012200 	.word	0x40012200

0800187c <HAL_ADC_ConvHalfCpltCallback>:
}
 800187c:	4770      	bx	lr

0800187e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800187e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001880:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001882:	f7ff fffb 	bl	800187c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001886:	bd08      	pop	{r3, pc}

08001888 <HAL_ADC_ErrorCallback>:
}
 8001888:	4770      	bx	lr

0800188a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800188a:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800188c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800188e:	2340      	movs	r3, #64	; 0x40
 8001890:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001892:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800189a:	f7ff fff5 	bl	8001888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800189e:	bd08      	pop	{r3, pc}

080018a0 <ADC_DMAConvCplt>:
{
 80018a0:	b508      	push	{r3, lr}
 80018a2:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80018a8:	f012 0f50 	tst.w	r2, #80	; 0x50
 80018ac:	d125      	bne.n	80018fa <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b4:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018b6:	6803      	ldr	r3, [r0, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80018be:	d119      	bne.n	80018f4 <ADC_DMAConvCplt+0x54>
 80018c0:	7e02      	ldrb	r2, [r0, #24]
 80018c2:	b9ba      	cbnz	r2, 80018f4 <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018c6:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80018ca:	d003      	beq.n	80018d4 <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018cc:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018ce:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80018d2:	d10f      	bne.n	80018f4 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	f022 0220 	bic.w	r2, r2, #32
 80018da:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e2:	6403      	str	r3, [r0, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018e6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80018ea:	d103      	bne.n	80018f4 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80018f4:	f7ff fad4 	bl	8000ea0 <HAL_ADC_ConvCpltCallback>
}
 80018f8:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80018fc:	f012 0f10 	tst.w	r2, #16
 8001900:	d104      	bne.n	800190c <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001902:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001904:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001906:	4618      	mov	r0, r3
 8001908:	4790      	blx	r2
}
 800190a:	e7f5      	b.n	80018f8 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 800190c:	f7ff ffbc 	bl	8001888 <HAL_ADC_ErrorCallback>
 8001910:	e7f2      	b.n	80018f8 <ADC_DMAConvCplt+0x58>
	...

08001914 <HAL_ADC_ConfigChannel>:
{
 8001914:	b430      	push	{r4, r5}
 8001916:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800191c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001920:	2b01      	cmp	r3, #1
 8001922:	f000 80b8 	beq.w	8001a96 <HAL_ADC_ConfigChannel+0x182>
 8001926:	2301      	movs	r3, #1
 8001928:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800192c:	680b      	ldr	r3, [r1, #0]
 800192e:	2b09      	cmp	r3, #9
 8001930:	d93a      	bls.n	80019a8 <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001932:	6805      	ldr	r5, [r0, #0]
 8001934:	68ea      	ldr	r2, [r5, #12]
 8001936:	b29b      	uxth	r3, r3
 8001938:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800193c:	3b1e      	subs	r3, #30
 800193e:	2407      	movs	r4, #7
 8001940:	fa04 f303 	lsl.w	r3, r4, r3
 8001944:	ea22 0303 	bic.w	r3, r2, r3
 8001948:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800194a:	6804      	ldr	r4, [r0, #0]
 800194c:	68e5      	ldr	r5, [r4, #12]
 800194e:	880b      	ldrh	r3, [r1, #0]
 8001950:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001954:	3b1e      	subs	r3, #30
 8001956:	688a      	ldr	r2, [r1, #8]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	432b      	orrs	r3, r5
 800195e:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001960:	684b      	ldr	r3, [r1, #4]
 8001962:	2b06      	cmp	r3, #6
 8001964:	d835      	bhi.n	80019d2 <HAL_ADC_ConfigChannel+0xbe>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001966:	6805      	ldr	r5, [r0, #0]
 8001968:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800196a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800196e:	3b05      	subs	r3, #5
 8001970:	241f      	movs	r4, #31
 8001972:	fa04 f303 	lsl.w	r3, r4, r3
 8001976:	ea22 0303 	bic.w	r3, r2, r3
 800197a:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800197c:	6804      	ldr	r4, [r0, #0]
 800197e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001980:	880a      	ldrh	r2, [r1, #0]
 8001982:	684b      	ldr	r3, [r1, #4]
 8001984:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001988:	3b05      	subs	r3, #5
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	432b      	orrs	r3, r5
 8001990:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001992:	6802      	ldr	r2, [r0, #0]
 8001994:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_ADC_ConfigChannel+0x188>)
 8001996:	429a      	cmp	r2, r3
 8001998:	d04b      	beq.n	8001a32 <HAL_ADC_ConfigChannel+0x11e>
  __HAL_UNLOCK(hadc);
 800199a:	2300      	movs	r3, #0
 800199c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80019a0:	4618      	mov	r0, r3
}
 80019a2:	b002      	add	sp, #8
 80019a4:	bc30      	pop	{r4, r5}
 80019a6:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019a8:	6805      	ldr	r5, [r0, #0]
 80019aa:	692a      	ldr	r2, [r5, #16]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80019b2:	2407      	movs	r4, #7
 80019b4:	fa04 f303 	lsl.w	r3, r4, r3
 80019b8:	ea22 0303 	bic.w	r3, r2, r3
 80019bc:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019be:	6804      	ldr	r4, [r0, #0]
 80019c0:	6925      	ldr	r5, [r4, #16]
 80019c2:	880b      	ldrh	r3, [r1, #0]
 80019c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80019c8:	688b      	ldr	r3, [r1, #8]
 80019ca:	4093      	lsls	r3, r2
 80019cc:	432b      	orrs	r3, r5
 80019ce:	6123      	str	r3, [r4, #16]
 80019d0:	e7c6      	b.n	8001960 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d816      	bhi.n	8001a04 <HAL_ADC_ConfigChannel+0xf0>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019d6:	6805      	ldr	r5, [r0, #0]
 80019d8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80019da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019de:	3b23      	subs	r3, #35	; 0x23
 80019e0:	241f      	movs	r4, #31
 80019e2:	fa04 f303 	lsl.w	r3, r4, r3
 80019e6:	ea22 0303 	bic.w	r3, r2, r3
 80019ea:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ec:	6804      	ldr	r4, [r0, #0]
 80019ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80019f0:	880a      	ldrh	r2, [r1, #0]
 80019f2:	684b      	ldr	r3, [r1, #4]
 80019f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019f8:	3b23      	subs	r3, #35	; 0x23
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	432b      	orrs	r3, r5
 8001a00:	6323      	str	r3, [r4, #48]	; 0x30
 8001a02:	e7c6      	b.n	8001992 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a04:	6805      	ldr	r5, [r0, #0]
 8001a06:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001a08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a0c:	3b41      	subs	r3, #65	; 0x41
 8001a0e:	241f      	movs	r4, #31
 8001a10:	fa04 f303 	lsl.w	r3, r4, r3
 8001a14:	ea22 0303 	bic.w	r3, r2, r3
 8001a18:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a1a:	6804      	ldr	r4, [r0, #0]
 8001a1c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001a1e:	880a      	ldrh	r2, [r1, #0]
 8001a20:	684b      	ldr	r3, [r1, #4]
 8001a22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a26:	3b41      	subs	r3, #65	; 0x41
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	432b      	orrs	r3, r5
 8001a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a30:	e7af      	b.n	8001992 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a32:	680b      	ldr	r3, [r1, #0]
 8001a34:	2b12      	cmp	r3, #18
 8001a36:	d024      	beq.n	8001a82 <HAL_ADC_ConfigChannel+0x16e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a38:	680b      	ldr	r3, [r1, #0]
 8001a3a:	3b10      	subs	r3, #16
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d8ac      	bhi.n	800199a <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_ADC_ConfigChannel+0x18c>)
 8001a42:	6853      	ldr	r3, [r2, #4]
 8001a44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a48:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a4a:	680b      	ldr	r3, [r1, #0]
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	d1a4      	bne.n	800199a <HAL_ADC_ConfigChannel+0x86>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_ADC_ConfigChannel+0x190>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001a58:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8001a5c:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	0c9b      	lsrs	r3, r3, #18
 8001a66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001a6e:	9b01      	ldr	r3, [sp, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d092      	beq.n	800199a <HAL_ADC_ConfigChannel+0x86>
        counter--;
 8001a74:	9b01      	ldr	r3, [sp, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001a7a:	9b01      	ldr	r3, [sp, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f9      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x160>
 8001a80:	e78b      	b.n	800199a <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a82:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_ADC_ConfigChannel+0x18c>)
 8001a84:	6853      	ldr	r3, [r2, #4]
 8001a86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a8a:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a8c:	6802      	ldr	r2, [r0, #0]
 8001a8e:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_ADC_ConfigChannel+0x188>)
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d0d1      	beq.n	8001a38 <HAL_ADC_ConfigChannel+0x124>
 8001a94:	e781      	b.n	800199a <HAL_ADC_ConfigChannel+0x86>
  __HAL_LOCK(hadc);
 8001a96:	2002      	movs	r0, #2
 8001a98:	e783      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x8e>
 8001a9a:	bf00      	nop
 8001a9c:	40012000 	.word	0x40012000
 8001aa0:	40012300 	.word	0x40012300
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	f000 808a 	beq.w	8001bc2 <HAL_CAN_Init+0x11a>
{
 8001aae:	b538      	push	{r3, r4, r5, lr}
 8001ab0:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ab2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001ab6:	b1d3      	cbz	r3, 8001aee <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ab8:	6822      	ldr	r2, [r4, #0]
 8001aba:	6813      	ldr	r3, [r2, #0]
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac2:	f7ff fd43 	bl	800154c <HAL_GetTick>
 8001ac6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	f012 0f01 	tst.w	r2, #1
 8001ad0:	d110      	bne.n	8001af4 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad2:	f7ff fd3b 	bl	800154c <HAL_GetTick>
 8001ad6:	1b40      	subs	r0, r0, r5
 8001ad8:	280a      	cmp	r0, #10
 8001ada:	d9f5      	bls.n	8001ac8 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001adc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae2:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ae4:	2305      	movs	r3, #5
 8001ae6:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001aec:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001aee:	f7ff f8e7 	bl	8000cc0 <HAL_CAN_MspInit>
 8001af2:	e7e1      	b.n	8001ab8 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	f022 0202 	bic.w	r2, r2, #2
 8001afa:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001afc:	f7ff fd26 	bl	800154c <HAL_GetTick>
 8001b00:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	f012 0f02 	tst.w	r2, #2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b0c:	f7ff fd1e 	bl	800154c <HAL_GetTick>
 8001b10:	1b40      	subs	r0, r0, r5
 8001b12:	280a      	cmp	r0, #10
 8001b14:	d9f5      	bls.n	8001b02 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b1e:	2305      	movs	r3, #5
 8001b20:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001b24:	2001      	movs	r0, #1
 8001b26:	e7e1      	b.n	8001aec <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b28:	7e22      	ldrb	r2, [r4, #24]
 8001b2a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	bf0c      	ite	eq
 8001b30:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b34:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001b38:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b3a:	7e63      	ldrb	r3, [r4, #25]
 8001b3c:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	6813      	ldr	r3, [r2, #0]
 8001b42:	bf0c      	ite	eq
 8001b44:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b48:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8001b4c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b4e:	7ea3      	ldrb	r3, [r4, #26]
 8001b50:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b52:	6822      	ldr	r2, [r4, #0]
 8001b54:	6813      	ldr	r3, [r2, #0]
 8001b56:	bf0c      	ite	eq
 8001b58:	f043 0320 	orreq.w	r3, r3, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b5c:	f023 0320 	bicne.w	r3, r3, #32
 8001b60:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b62:	7ee3      	ldrb	r3, [r4, #27]
 8001b64:	2b01      	cmp	r3, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	6813      	ldr	r3, [r2, #0]
 8001b6a:	bf0c      	ite	eq
 8001b6c:	f023 0310 	biceq.w	r3, r3, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b70:	f043 0310 	orrne.w	r3, r3, #16
 8001b74:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b76:	7f23      	ldrb	r3, [r4, #28]
 8001b78:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b7a:	6822      	ldr	r2, [r4, #0]
 8001b7c:	6813      	ldr	r3, [r2, #0]
 8001b7e:	bf0c      	ite	eq
 8001b80:	f043 0308 	orreq.w	r3, r3, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b84:	f023 0308 	bicne.w	r3, r3, #8
 8001b88:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b8a:	7f63      	ldrb	r3, [r4, #29]
 8001b8c:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b8e:	6822      	ldr	r2, [r4, #0]
 8001b90:	6813      	ldr	r3, [r2, #0]
 8001b92:	bf0c      	ite	eq
 8001b94:	f043 0304 	orreq.w	r3, r3, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b98:	f023 0304 	bicne.w	r3, r3, #4
 8001b9c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b9e:	6821      	ldr	r1, [r4, #0]
 8001ba0:	68a3      	ldr	r3, [r4, #8]
 8001ba2:	68e2      	ldr	r2, [r4, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	6922      	ldr	r2, [r4, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	6962      	ldr	r2, [r4, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	6862      	ldr	r2, [r4, #4]
 8001bb0:	3a01      	subs	r2, #1
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001bc0:	e794      	b.n	8001aec <HAL_CAN_Init+0x44>
    return HAL_ERROR;
 8001bc2:	2001      	movs	r0, #1
}
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bc8:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d905      	bls.n	8001be0 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bda:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
  }
}
 8001bde:	4770      	bx	lr
{
 8001be0:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001be2:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <HAL_CAN_ConfigFilter+0x12c>)
 8001be4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001bf0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bf4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001bf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001bfc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c00:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001c02:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001c06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c0a:	694a      	ldr	r2, [r1, #20]
 8001c0c:	f002 021f 	and.w	r2, r2, #31
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c16:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8001c1a:	43d4      	mvns	r4, r2
 8001c1c:	ea20 0002 	bic.w	r0, r0, r2
 8001c20:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c24:	69cb      	ldr	r3, [r1, #28]
 8001c26:	b9b3      	cbnz	r3, 8001c56 <HAL_CAN_ConfigFilter+0x8e>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c28:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <HAL_CAN_ConfigFilter+0x12c>)
 8001c2a:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8001c2e:	4020      	ands	r0, r4
 8001c30:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c34:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c36:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c38:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c3a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c3e:	3048      	adds	r0, #72	; 0x48
 8001c40:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c44:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c46:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c48:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c4e:	3548      	adds	r5, #72	; 0x48
 8001c50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001c54:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c56:	69cb      	ldr	r3, [r1, #28]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d01d      	beq.n	8001c98 <HAL_CAN_ConfigFilter+0xd0>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c5c:	698b      	ldr	r3, [r1, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d132      	bne.n	8001cc8 <HAL_CAN_ConfigFilter+0x100>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c62:	4824      	ldr	r0, [pc, #144]	; (8001cf4 <HAL_CAN_ConfigFilter+0x12c>)
 8001c64:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8001c68:	4023      	ands	r3, r4
 8001c6a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c6e:	690b      	ldr	r3, [r1, #16]
 8001c70:	bb8b      	cbnz	r3, 8001cd6 <HAL_CAN_ConfigFilter+0x10e>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_CAN_ConfigFilter+0x12c>)
 8001c74:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001c78:	4004      	ands	r4, r0
 8001c7a:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c7e:	6a0b      	ldr	r3, [r1, #32]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d02f      	beq.n	8001ce4 <HAL_CAN_ConfigFilter+0x11c>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <HAL_CAN_ConfigFilter+0x12c>)
 8001c86:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8001c92:	2000      	movs	r0, #0
}
 8001c94:	bc70      	pop	{r4, r5, r6}
 8001c96:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_CAN_ConfigFilter+0x12c>)
 8001c9a:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8001c9e:	4310      	orrs	r0, r2
 8001ca0:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ca4:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ca6:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ca8:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001caa:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cae:	3048      	adds	r0, #72	; 0x48
 8001cb0:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cb4:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cb6:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cb8:	8988      	ldrh	r0, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cbe:	3548      	adds	r5, #72	; 0x48
 8001cc0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001cc4:	6058      	str	r0, [r3, #4]
 8001cc6:	e7c9      	b.n	8001c5c <HAL_CAN_ConfigFilter+0x94>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <HAL_CAN_ConfigFilter+0x12c>)
 8001cca:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 8001cd4:	e7cb      	b.n	8001c6e <HAL_CAN_ConfigFilter+0xa6>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cd6:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <HAL_CAN_ConfigFilter+0x12c>)
 8001cd8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 8001ce2:	e7cc      	b.n	8001c7e <HAL_CAN_ConfigFilter+0xb6>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ce4:	4903      	ldr	r1, [pc, #12]	; (8001cf4 <HAL_CAN_ConfigFilter+0x12c>)
 8001ce6:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 8001cea:	431a      	orrs	r2, r3
 8001cec:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
 8001cf0:	e7c8      	b.n	8001c84 <HAL_CAN_ConfigFilter+0xbc>
 8001cf2:	bf00      	nop
 8001cf4:	40006400 	.word	0x40006400

08001cf8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cfc:	f890 5020 	ldrb.w	r5, [r0, #32]
 8001d00:	b2ed      	uxtb	r5, r5
 8001d02:	2d01      	cmp	r5, #1
 8001d04:	d006      	beq.n	8001d14 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d0c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001d0e:	2501      	movs	r5, #1
  }
}
 8001d10:	4628      	mov	r0, r5
 8001d12:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d14:	2302      	movs	r3, #2
 8001d16:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d1a:	6802      	ldr	r2, [r0, #0]
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d24:	f7ff fc12 	bl	800154c <HAL_GetTick>
 8001d28:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f013 0f01 	tst.w	r3, #1
 8001d32:	d00c      	beq.n	8001d4e <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d34:	f7ff fc0a 	bl	800154c <HAL_GetTick>
 8001d38:	1b83      	subs	r3, r0, r6
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d9f5      	bls.n	8001d2a <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d44:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d46:	2305      	movs	r3, #5
 8001d48:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8001d4c:	e7e0      	b.n	8001d10 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d4e:	2500      	movs	r5, #0
 8001d50:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8001d52:	e7dd      	b.n	8001d10 <HAL_CAN_Start+0x18>

08001d54 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d54:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d56:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d5a:	6805      	ldr	r5, [r0, #0]
 8001d5c:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d5e:	3c01      	subs	r4, #1
 8001d60:	b2e4      	uxtb	r4, r4
 8001d62:	2c01      	cmp	r4, #1
 8001d64:	d869      	bhi.n	8001e3a <HAL_CAN_AddTxMessage+0xe6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d66:	f015 5fe0 	tst.w	r5, #469762048	; 0x1c000000
 8001d6a:	d060      	beq.n	8001e2e <HAL_CAN_AddTxMessage+0xda>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d6c:	f3c5 6401 	ubfx	r4, r5, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d70:	2c02      	cmp	r4, #2
 8001d72:	d905      	bls.n	8001d80 <HAL_CAN_AddTxMessage+0x2c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d7a:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	e061      	b.n	8001e44 <HAL_CAN_AddTxMessage+0xf0>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d80:	2501      	movs	r5, #1
 8001d82:	40a5      	lsls	r5, r4
 8001d84:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d86:	688b      	ldr	r3, [r1, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d13b      	bne.n	8001e04 <HAL_CAN_AddTxMessage+0xb0>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d8c:	6805      	ldr	r5, [r0, #0]
 8001d8e:	680e      	ldr	r6, [r1, #0]
 8001d90:	68cb      	ldr	r3, [r1, #12]
 8001d92:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 8001d96:	f104 0318 	add.w	r3, r4, #24
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	50ee      	str	r6, [r5, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d9e:	6803      	ldr	r3, [r0, #0]
 8001da0:	690d      	ldr	r5, [r1, #16]
 8001da2:	f104 0618 	add.w	r6, r4, #24
 8001da6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8001daa:	605d      	str	r5, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dac:	7d0b      	ldrb	r3, [r1, #20]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d033      	beq.n	8001e1a <HAL_CAN_AddTxMessage+0xc6>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001db2:	6801      	ldr	r1, [r0, #0]
 8001db4:	79d5      	ldrb	r5, [r2, #7]
 8001db6:	7993      	ldrb	r3, [r2, #6]
 8001db8:	041b      	lsls	r3, r3, #16
 8001dba:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001dbe:	7915      	ldrb	r5, [r2, #4]
 8001dc0:	432b      	orrs	r3, r5
 8001dc2:	7955      	ldrb	r5, [r2, #5]
 8001dc4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001dc8:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8001dcc:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dd0:	6801      	ldr	r1, [r0, #0]
 8001dd2:	78d5      	ldrb	r5, [r2, #3]
 8001dd4:	7893      	ldrb	r3, [r2, #2]
 8001dd6:	041b      	lsls	r3, r3, #16
 8001dd8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001ddc:	7815      	ldrb	r5, [r2, #0]
 8001dde:	432b      	orrs	r3, r5
 8001de0:	7852      	ldrb	r2, [r2, #1]
 8001de2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001de6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8001dea:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001dee:	6803      	ldr	r3, [r0, #0]
 8001df0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8001df4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 8001e00:	2000      	movs	r0, #0
 8001e02:	e01f      	b.n	8001e44 <HAL_CAN_AddTxMessage+0xf0>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e04:	6805      	ldr	r5, [r0, #0]
 8001e06:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 8001e08:	68cf      	ldr	r7, [r1, #12]
 8001e0a:	433b      	orrs	r3, r7
 8001e0c:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e10:	f104 0618 	add.w	r6, r4, #24
 8001e14:	0136      	lsls	r6, r6, #4
 8001e16:	51ab      	str	r3, [r5, r6]
 8001e18:	e7c1      	b.n	8001d9e <HAL_CAN_AddTxMessage+0x4a>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e1a:	6803      	ldr	r3, [r0, #0]
 8001e1c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001e20:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8001e24:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001e28:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 8001e2c:	e7c1      	b.n	8001db2 <HAL_CAN_AddTxMessage+0x5e>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e34:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 8001e36:	2001      	movs	r0, #1
 8001e38:	e004      	b.n	8001e44 <HAL_CAN_AddTxMessage+0xf0>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e40:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001e42:	2001      	movs	r0, #1
  }
}
 8001e44:	bcf0      	pop	{r4, r5, r6, r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e48:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e4a:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e4e:	3c01      	subs	r4, #1
 8001e50:	b2e4      	uxtb	r4, r4
 8001e52:	2c01      	cmp	r4, #1
 8001e54:	f200 808e 	bhi.w	8001f74 <HAL_CAN_GetRxMessage+0x12c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e58:	b951      	cbnz	r1, 8001e70 <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e5a:	6804      	ldr	r4, [r0, #0]
 8001e5c:	68e4      	ldr	r4, [r4, #12]
 8001e5e:	f014 0f03 	tst.w	r4, #3
 8001e62:	d110      	bne.n	8001e86 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e6a:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	e086      	b.n	8001f7e <HAL_CAN_GetRxMessage+0x136>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e70:	6804      	ldr	r4, [r0, #0]
 8001e72:	6924      	ldr	r4, [r4, #16]
 8001e74:	f014 0f03 	tst.w	r4, #3
 8001e78:	d105      	bne.n	8001e86 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e80:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8001e82:	2001      	movs	r0, #1
 8001e84:	e07b      	b.n	8001f7e <HAL_CAN_GetRxMessage+0x136>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e86:	6805      	ldr	r5, [r0, #0]
 8001e88:	f101 041b 	add.w	r4, r1, #27
 8001e8c:	0124      	lsls	r4, r4, #4
 8001e8e:	592c      	ldr	r4, [r5, r4]
 8001e90:	f004 0404 	and.w	r4, r4, #4
 8001e94:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e96:	2c00      	cmp	r4, #0
 8001e98:	d15d      	bne.n	8001f56 <HAL_CAN_GetRxMessage+0x10e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e9a:	6805      	ldr	r5, [r0, #0]
 8001e9c:	f101 041b 	add.w	r4, r1, #27
 8001ea0:	0124      	lsls	r4, r4, #4
 8001ea2:	592c      	ldr	r4, [r5, r4]
 8001ea4:	0d64      	lsrs	r4, r4, #21
 8001ea6:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ea8:	6805      	ldr	r5, [r0, #0]
 8001eaa:	f101 041b 	add.w	r4, r1, #27
 8001eae:	0124      	lsls	r4, r4, #4
 8001eb0:	592d      	ldr	r5, [r5, r4]
 8001eb2:	f005 0502 	and.w	r5, r5, #2
 8001eb6:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001eb8:	6805      	ldr	r5, [r0, #0]
 8001eba:	4425      	add	r5, r4
 8001ebc:	686d      	ldr	r5, [r5, #4]
 8001ebe:	f005 050f 	and.w	r5, r5, #15
 8001ec2:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ec4:	6805      	ldr	r5, [r0, #0]
 8001ec6:	4425      	add	r5, r4
 8001ec8:	686d      	ldr	r5, [r5, #4]
 8001eca:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8001ece:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ed0:	6805      	ldr	r5, [r0, #0]
 8001ed2:	442c      	add	r4, r5
 8001ed4:	6864      	ldr	r4, [r4, #4]
 8001ed6:	0c24      	lsrs	r4, r4, #16
 8001ed8:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001eda:	6802      	ldr	r2, [r0, #0]
 8001edc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001ee0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001ee4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ee6:	6802      	ldr	r2, [r0, #0]
 8001ee8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001eec:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001ef0:	0a12      	lsrs	r2, r2, #8
 8001ef2:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ef4:	6802      	ldr	r2, [r0, #0]
 8001ef6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001efa:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001efe:	0c12      	lsrs	r2, r2, #16
 8001f00:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f02:	6802      	ldr	r2, [r0, #0]
 8001f04:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f08:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001f0c:	0e12      	lsrs	r2, r2, #24
 8001f0e:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f10:	6802      	ldr	r2, [r0, #0]
 8001f12:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f16:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001f1a:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f1c:	6802      	ldr	r2, [r0, #0]
 8001f1e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f22:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001f26:	0a12      	lsrs	r2, r2, #8
 8001f28:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f2a:	6802      	ldr	r2, [r0, #0]
 8001f2c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f30:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001f34:	0c12      	lsrs	r2, r2, #16
 8001f36:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f38:	6802      	ldr	r2, [r0, #0]
 8001f3a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f3e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001f42:	0e12      	lsrs	r2, r2, #24
 8001f44:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f46:	b971      	cbnz	r1, 8001f66 <HAL_CAN_GetRxMessage+0x11e>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f48:	6802      	ldr	r2, [r0, #0]
 8001f4a:	68d3      	ldr	r3, [r2, #12]
 8001f4c:	f043 0320 	orr.w	r3, r3, #32
 8001f50:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8001f52:	2000      	movs	r0, #0
 8001f54:	e013      	b.n	8001f7e <HAL_CAN_GetRxMessage+0x136>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f56:	6805      	ldr	r5, [r0, #0]
 8001f58:	f101 041b 	add.w	r4, r1, #27
 8001f5c:	0124      	lsls	r4, r4, #4
 8001f5e:	592c      	ldr	r4, [r5, r4]
 8001f60:	08e4      	lsrs	r4, r4, #3
 8001f62:	6054      	str	r4, [r2, #4]
 8001f64:	e7a0      	b.n	8001ea8 <HAL_CAN_GetRxMessage+0x60>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f66:	6802      	ldr	r2, [r0, #0]
 8001f68:	6913      	ldr	r3, [r2, #16]
 8001f6a:	f043 0320 	orr.w	r3, r3, #32
 8001f6e:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8001f70:	2000      	movs	r0, #0
 8001f72:	e004      	b.n	8001f7e <HAL_CAN_GetRxMessage+0x136>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001f7c:	2001      	movs	r0, #1
  }
}
 8001f7e:	bc30      	pop	{r4, r5}
 8001f80:	4770      	bx	lr

08001f82 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f82:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d905      	bls.n	8001f9a <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f94:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001f96:	2001      	movs	r0, #1
  }
}
 8001f98:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f9a:	6802      	ldr	r2, [r0, #0]
 8001f9c:	6953      	ldr	r3, [r2, #20]
 8001f9e:	4319      	orrs	r1, r3
 8001fa0:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fa8:	4770      	bx	lr

08001faa <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001faa:	4770      	bx	lr

08001fac <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fac:	4770      	bx	lr

08001fae <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fae:	4770      	bx	lr

08001fb0 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fb8:	4770      	bx	lr

08001fba <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fba:	4770      	bx	lr

08001fbc <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_CAN_IRQHandler>:
{
 8001fbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc2:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fc4:	6803      	ldr	r3, [r0, #0]
 8001fc6:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fc8:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fcc:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fce:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fd2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fd6:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fda:	f014 0601 	ands.w	r6, r4, #1
 8001fde:	d03b      	beq.n	8002058 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fe0:	f017 0601 	ands.w	r6, r7, #1
 8001fe4:	d016      	beq.n	8002014 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fea:	f017 0f02 	tst.w	r7, #2
 8001fee:	d108      	bne.n	8002002 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ff0:	f017 0f04 	tst.w	r7, #4
 8001ff4:	d10c      	bne.n	8002010 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ff6:	f017 0608 	ands.w	r6, r7, #8
 8001ffa:	d006      	beq.n	800200a <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ffc:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8002000:	e008      	b.n	8002014 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002002:	f7ff ffd0 	bl	8001fa6 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002006:	2600      	movs	r6, #0
 8002008:	e004      	b.n	8002014 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800200a:	f7ff ffcf 	bl	8001fac <HAL_CAN_TxMailbox0AbortCallback>
 800200e:	e001      	b.n	8002014 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002010:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002014:	f417 7f80 	tst.w	r7, #256	; 0x100
 8002018:	d00d      	beq.n	8002036 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800201a:	682b      	ldr	r3, [r5, #0]
 800201c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002020:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002022:	f417 7f00 	tst.w	r7, #512	; 0x200
 8002026:	f040 8087 	bne.w	8002138 <HAL_CAN_IRQHandler+0x17a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800202a:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800202e:	f000 8087 	beq.w	8002140 <HAL_CAN_IRQHandler+0x182>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002032:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002036:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800203a:	d00d      	beq.n	8002058 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800203c:	682b      	ldr	r3, [r5, #0]
 800203e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002042:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002044:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002048:	f040 8084 	bne.w	8002154 <HAL_CAN_IRQHandler+0x196>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800204c:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 8002050:	f000 8084 	beq.w	800215c <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002054:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002058:	f014 0f08 	tst.w	r4, #8
 800205c:	d007      	beq.n	800206e <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800205e:	f01b 0f10 	tst.w	fp, #16
 8002062:	d004      	beq.n	800206e <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002064:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	2210      	movs	r2, #16
 800206c:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800206e:	f014 0f04 	tst.w	r4, #4
 8002072:	d002      	beq.n	800207a <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002074:	f01b 0f08 	tst.w	fp, #8
 8002078:	d17a      	bne.n	8002170 <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800207a:	f014 0f02 	tst.w	r4, #2
 800207e:	d004      	beq.n	800208a <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002080:	682b      	ldr	r3, [r5, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f013 0f03 	tst.w	r3, #3
 8002088:	d179      	bne.n	800217e <HAL_CAN_IRQHandler+0x1c0>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800208a:	f014 0f40 	tst.w	r4, #64	; 0x40
 800208e:	d007      	beq.n	80020a0 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002090:	f01a 0f10 	tst.w	sl, #16
 8002094:	d004      	beq.n	80020a0 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002096:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800209a:	682b      	ldr	r3, [r5, #0]
 800209c:	2210      	movs	r2, #16
 800209e:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020a0:	f014 0f20 	tst.w	r4, #32
 80020a4:	d002      	beq.n	80020ac <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020a6:	f01a 0f08 	tst.w	sl, #8
 80020aa:	d16c      	bne.n	8002186 <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020ac:	f014 0f10 	tst.w	r4, #16
 80020b0:	d004      	beq.n	80020bc <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020b2:	682b      	ldr	r3, [r5, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f013 0f03 	tst.w	r3, #3
 80020ba:	d16b      	bne.n	8002194 <HAL_CAN_IRQHandler+0x1d6>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020bc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80020c0:	d002      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020c2:	f018 0f10 	tst.w	r8, #16
 80020c6:	d169      	bne.n	800219c <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020c8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80020cc:	d002      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020ce:	f018 0f08 	tst.w	r8, #8
 80020d2:	d16a      	bne.n	80021aa <HAL_CAN_IRQHandler+0x1ec>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020d4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80020d8:	f000 8084 	beq.w	80021e4 <HAL_CAN_IRQHandler+0x226>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020dc:	f018 0f04 	tst.w	r8, #4
 80020e0:	d07d      	beq.n	80021de <HAL_CAN_IRQHandler+0x220>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020e2:	f414 7f80 	tst.w	r4, #256	; 0x100
 80020e6:	d004      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x134>
 80020e8:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80020ec:	bf18      	it	ne
 80020ee:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020f2:	f414 7f00 	tst.w	r4, #512	; 0x200
 80020f6:	d004      	beq.n	8002102 <HAL_CAN_IRQHandler+0x144>
 80020f8:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80020fc:	bf18      	it	ne
 80020fe:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002102:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8002106:	d004      	beq.n	8002112 <HAL_CAN_IRQHandler+0x154>
 8002108:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800210c:	bf18      	it	ne
 800210e:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002112:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8002116:	d062      	beq.n	80021de <HAL_CAN_IRQHandler+0x220>
 8002118:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 800211c:	d05f      	beq.n	80021de <HAL_CAN_IRQHandler+0x220>
        switch (esrflags & CAN_ESR_LEC)
 800211e:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8002122:	d065      	beq.n	80021f0 <HAL_CAN_IRQHandler+0x232>
 8002124:	d84e      	bhi.n	80021c4 <HAL_CAN_IRQHandler+0x206>
 8002126:	f1b9 0f20 	cmp.w	r9, #32
 800212a:	d05e      	beq.n	80021ea <HAL_CAN_IRQHandler+0x22c>
 800212c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8002130:	d142      	bne.n	80021b8 <HAL_CAN_IRQHandler+0x1fa>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002132:	f046 0620 	orr.w	r6, r6, #32
            break;
 8002136:	e04d      	b.n	80021d4 <HAL_CAN_IRQHandler+0x216>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002138:	4628      	mov	r0, r5
 800213a:	f7ff ff35 	bl	8001fa8 <HAL_CAN_TxMailbox1CompleteCallback>
 800213e:	e77a      	b.n	8002036 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002140:	f417 6f00 	tst.w	r7, #2048	; 0x800
 8002144:	d002      	beq.n	800214c <HAL_CAN_IRQHandler+0x18e>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002146:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800214a:	e774      	b.n	8002036 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800214c:	4628      	mov	r0, r5
 800214e:	f7ff ff2e 	bl	8001fae <HAL_CAN_TxMailbox1AbortCallback>
 8002152:	e770      	b.n	8002036 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002154:	4628      	mov	r0, r5
 8002156:	f7ff ff28 	bl	8001faa <HAL_CAN_TxMailbox2CompleteCallback>
 800215a:	e77d      	b.n	8002058 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800215c:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8002160:	d002      	beq.n	8002168 <HAL_CAN_IRQHandler+0x1aa>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002162:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8002166:	e777      	b.n	8002058 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002168:	4628      	mov	r0, r5
 800216a:	f7ff ff21 	bl	8001fb0 <HAL_CAN_TxMailbox2AbortCallback>
 800216e:	e773      	b.n	8002058 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002170:	682b      	ldr	r3, [r5, #0]
 8002172:	2208      	movs	r2, #8
 8002174:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002176:	4628      	mov	r0, r5
 8002178:	f7ff ff1b 	bl	8001fb2 <HAL_CAN_RxFifo0FullCallback>
 800217c:	e77d      	b.n	800207a <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800217e:	4628      	mov	r0, r5
 8002180:	f7fe ffe0 	bl	8001144 <HAL_CAN_RxFifo0MsgPendingCallback>
 8002184:	e781      	b.n	800208a <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002186:	682b      	ldr	r3, [r5, #0]
 8002188:	2208      	movs	r2, #8
 800218a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800218c:	4628      	mov	r0, r5
 800218e:	f7ff ff12 	bl	8001fb6 <HAL_CAN_RxFifo1FullCallback>
 8002192:	e78b      	b.n	80020ac <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002194:	4628      	mov	r0, r5
 8002196:	f7ff ff0d 	bl	8001fb4 <HAL_CAN_RxFifo1MsgPendingCallback>
 800219a:	e78f      	b.n	80020bc <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	2210      	movs	r2, #16
 80021a0:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80021a2:	4628      	mov	r0, r5
 80021a4:	f7ff ff08 	bl	8001fb8 <HAL_CAN_SleepCallback>
 80021a8:	e78e      	b.n	80020c8 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021aa:	682b      	ldr	r3, [r5, #0]
 80021ac:	2208      	movs	r2, #8
 80021ae:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021b0:	4628      	mov	r0, r5
 80021b2:	f7ff ff02 	bl	8001fba <HAL_CAN_WakeUpFromRxMsgCallback>
 80021b6:	e78d      	b.n	80020d4 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 80021b8:	f1b9 0f10 	cmp.w	r9, #16
 80021bc:	d10a      	bne.n	80021d4 <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_STF;
 80021be:	f046 0608 	orr.w	r6, r6, #8
            break;
 80021c2:	e007      	b.n	80021d4 <HAL_CAN_IRQHandler+0x216>
        switch (esrflags & CAN_ESR_LEC)
 80021c4:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 80021c8:	d015      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x238>
 80021ca:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 80021ce:	bf08      	it	eq
 80021d0:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021d4:	682a      	ldr	r2, [r5, #0]
 80021d6:	6993      	ldr	r3, [r2, #24]
 80021d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021dc:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021de:	682b      	ldr	r3, [r5, #0]
 80021e0:	2204      	movs	r2, #4
 80021e2:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021e4:	b956      	cbnz	r6, 80021fc <HAL_CAN_IRQHandler+0x23e>
}
 80021e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_FOR;
 80021ea:	f046 0610 	orr.w	r6, r6, #16
            break;
 80021ee:	e7f1      	b.n	80021d4 <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BR;
 80021f0:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80021f4:	e7ee      	b.n	80021d4 <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BD;
 80021f6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80021fa:	e7eb      	b.n	80021d4 <HAL_CAN_IRQHandler+0x216>
    hcan->ErrorCode |= errorcode;
 80021fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80021fe:	431e      	orrs	r6, r3
 8002200:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8002202:	4628      	mov	r0, r5
 8002204:	f7ff feda 	bl	8001fbc <HAL_CAN_ErrorCallback>
}
 8002208:	e7ed      	b.n	80021e6 <HAL_CAN_IRQHandler+0x228>
	...

0800220c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4907      	ldr	r1, [pc, #28]	; (800222c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800220e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	0203      	lsls	r3, r0, #8
 8002212:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800221a:	0412      	lsls	r2, r2, #16
 800221c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002228:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002230:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_NVIC_SetPriority+0x5c>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223a:	f1c3 0407 	rsb	r4, r3, #7
 800223e:	2c04      	cmp	r4, #4
 8002240:	bf28      	it	cs
 8002242:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002244:	1d1d      	adds	r5, r3, #4
 8002246:	2d06      	cmp	r5, #6
 8002248:	bf8c      	ite	hi
 800224a:	3b03      	subhi	r3, #3
 800224c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224e:	f04f 35ff 	mov.w	r5, #4294967295
 8002252:	fa05 f404 	lsl.w	r4, r5, r4
 8002256:	ea21 0104 	bic.w	r1, r1, r4
 800225a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	fa05 f303 	lsl.w	r3, r5, r3
 8002260:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002266:	2800      	cmp	r0, #0
 8002268:	db09      	blt.n	800227e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	0109      	lsls	r1, r1, #4
 800226c:	b2c9      	uxtb	r1, r1
 800226e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002272:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002276:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800227a:	bc30      	pop	{r4, r5}
 800227c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	f000 000f 	and.w	r0, r0, #15
 8002282:	0109      	lsls	r1, r1, #4
 8002284:	b2c9      	uxtb	r1, r1
 8002286:	4b02      	ldr	r3, [pc, #8]	; (8002290 <HAL_NVIC_SetPriority+0x60>)
 8002288:	5419      	strb	r1, [r3, r0]
 800228a:	e7f6      	b.n	800227a <HAL_NVIC_SetPriority+0x4a>
 800228c:	e000ed00 	.word	0xe000ed00
 8002290:	e000ed14 	.word	0xe000ed14

08002294 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002294:	2800      	cmp	r0, #0
 8002296:	db08      	blt.n	80022aa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002298:	0942      	lsrs	r2, r0, #5
 800229a:	f000 001f 	and.w	r0, r0, #31
 800229e:	2301      	movs	r3, #1
 80022a0:	fa03 f000 	lsl.w	r0, r3, r0
 80022a4:	4b01      	ldr	r3, [pc, #4]	; (80022ac <HAL_NVIC_EnableIRQ+0x18>)
 80022a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	3801      	subs	r0, #1
 80022b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80022b6:	d20a      	bcs.n	80022ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_SYSTICK_Config+0x24>)
 80022ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <HAL_SYSTICK_Config+0x28>)
 80022be:	21f0      	movs	r1, #240	; 0xf0
 80022c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	2000      	movs	r0, #0
 80022c6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e010 	.word	0xe000e010
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022dc:	b410      	push	{r4}
 80022de:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e0:	6803      	ldr	r3, [r0, #0]
 80022e2:	b2d8      	uxtb	r0, r3
 80022e4:	3810      	subs	r0, #16
 80022e6:	490b      	ldr	r1, [pc, #44]	; (8002314 <DMA_CalcBaseAndBitshift+0x38>)
 80022e8:	fba1 4100 	umull	r4, r1, r1, r0
 80022ec:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ee:	4c0a      	ldr	r4, [pc, #40]	; (8002318 <DMA_CalcBaseAndBitshift+0x3c>)
 80022f0:	5c61      	ldrb	r1, [r4, r1]
 80022f2:	65d1      	str	r1, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f4:	285f      	cmp	r0, #95	; 0x5f
 80022f6:	d908      	bls.n	800230a <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022f8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022fc:	f023 0303 	bic.w	r3, r3, #3
 8002300:	1d18      	adds	r0, r3, #4
 8002302:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002308:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230a:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 800230e:	f020 0003 	bic.w	r0, r0, #3
 8002312:	e7f6      	b.n	8002302 <DMA_CalcBaseAndBitshift+0x26>
 8002314:	aaaaaaab 	.word	0xaaaaaaab
 8002318:	08003678 	.word	0x08003678

0800231c <HAL_DMA_Init>:
{
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff f914 	bl	800154c <HAL_GetTick>
  if(hdma == NULL)
 8002324:	2c00      	cmp	r4, #0
 8002326:	f000 808c 	beq.w	8002442 <HAL_DMA_Init+0x126>
 800232a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800232c:	2302      	movs	r3, #2
 800232e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002332:	2300      	movs	r3, #0
 8002334:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002338:	6822      	ldr	r2, [r4, #0]
 800233a:	6813      	ldr	r3, [r2, #0]
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002342:	6823      	ldr	r3, [r4, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f012 0f01 	tst.w	r2, #1
 800234a:	d00a      	beq.n	8002362 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800234c:	f7ff f8fe 	bl	800154c <HAL_GetTick>
 8002350:	1b43      	subs	r3, r0, r5
 8002352:	2b05      	cmp	r3, #5
 8002354:	d9f5      	bls.n	8002342 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002356:	2320      	movs	r3, #32
 8002358:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800235a:	2003      	movs	r0, #3
 800235c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002360:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 8002362:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002364:	4838      	ldr	r0, [pc, #224]	; (8002448 <HAL_DMA_Init+0x12c>)
 8002366:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002368:	6861      	ldr	r1, [r4, #4]
 800236a:	68a2      	ldr	r2, [r4, #8]
 800236c:	430a      	orrs	r2, r1
 800236e:	68e1      	ldr	r1, [r4, #12]
 8002370:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002372:	6921      	ldr	r1, [r4, #16]
 8002374:	430a      	orrs	r2, r1
 8002376:	6961      	ldr	r1, [r4, #20]
 8002378:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237a:	69a1      	ldr	r1, [r4, #24]
 800237c:	430a      	orrs	r2, r1
 800237e:	69e1      	ldr	r1, [r4, #28]
 8002380:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002382:	6a21      	ldr	r1, [r4, #32]
 8002384:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002386:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002388:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800238a:	2904      	cmp	r1, #4
 800238c:	d021      	beq.n	80023d2 <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 800238e:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002390:	6821      	ldr	r1, [r4, #0]
 8002392:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002394:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 8002398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800239a:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800239c:	2b04      	cmp	r3, #4
 800239e:	d10a      	bne.n	80023b6 <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 80023a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023a2:	431a      	orrs	r2, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80023a6:	b130      	cbz	r0, 80023b6 <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023a8:	69a5      	ldr	r5, [r4, #24]
 80023aa:	bb3d      	cbnz	r5, 80023fc <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d01f      	beq.n	80023f0 <HAL_DMA_Init+0xd4>
 80023b0:	f033 0302 	bics.w	r3, r3, #2
 80023b4:	d012      	beq.n	80023dc <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 80023b6:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023b8:	4620      	mov	r0, r4
 80023ba:	f7ff ff8f 	bl	80022dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80023c0:	233f      	movs	r3, #63	; 0x3f
 80023c2:	4093      	lsls	r3, r2
 80023c4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c6:	2000      	movs	r0, #0
 80023c8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80023d0:	e7c6      	b.n	8002360 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80023d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80023d6:	4301      	orrs	r1, r0
 80023d8:	430a      	orrs	r2, r1
 80023da:	e7d8      	b.n	800238e <HAL_DMA_Init+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80023dc:	f3c0 6000 	ubfx	r0, r0, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023e0:	2800      	cmp	r0, #0
 80023e2:	d0e8      	beq.n	80023b6 <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e4:	2340      	movs	r3, #64	; 0x40
 80023e6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80023e8:	2001      	movs	r0, #1
 80023ea:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80023ee:	e7b7      	b.n	8002360 <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 80023f0:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80023f4:	bf14      	ite	ne
 80023f6:	2000      	movne	r0, #0
 80023f8:	2001      	moveq	r0, #1
 80023fa:	e7f1      	b.n	80023e0 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023fc:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8002400:	d006      	beq.n	8002410 <HAL_DMA_Init+0xf4>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002402:	2b02      	cmp	r3, #2
 8002404:	d9ee      	bls.n	80023e4 <HAL_DMA_Init+0xc8>
 8002406:	2b03      	cmp	r3, #3
 8002408:	d1d5      	bne.n	80023b6 <HAL_DMA_Init+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	f3c0 6000 	ubfx	r0, r0, #24, #1
 800240e:	e7e7      	b.n	80023e0 <HAL_DMA_Init+0xc4>
    switch (tmp)
 8002410:	2b03      	cmp	r3, #3
 8002412:	d814      	bhi.n	800243e <HAL_DMA_Init+0x122>
 8002414:	a501      	add	r5, pc, #4	; (adr r5, 800241c <HAL_DMA_Init+0x100>)
 8002416:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	080023e5 	.word	0x080023e5
 8002420:	0800242d 	.word	0x0800242d
 8002424:	080023e5 	.word	0x080023e5
 8002428:	08002433 	.word	0x08002433
  HAL_StatusTypeDef status = HAL_OK;
 800242c:	f3c0 6000 	ubfx	r0, r0, #24, #1
 8002430:	e7d6      	b.n	80023e0 <HAL_DMA_Init+0xc4>
 8002432:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002436:	bf14      	ite	ne
 8002438:	2000      	movne	r0, #0
 800243a:	2001      	moveq	r0, #1
 800243c:	e7d0      	b.n	80023e0 <HAL_DMA_Init+0xc4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800243e:	2000      	movs	r0, #0
 8002440:	e7ce      	b.n	80023e0 <HAL_DMA_Init+0xc4>
    return HAL_ERROR;
 8002442:	2001      	movs	r0, #1
 8002444:	e78c      	b.n	8002360 <HAL_DMA_Init+0x44>
 8002446:	bf00      	nop
 8002448:	f010803f 	.word	0xf010803f

0800244c <HAL_DMA_Start_IT>:
{
 800244c:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002450:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002454:	2c01      	cmp	r4, #1
 8002456:	d03c      	beq.n	80024d2 <HAL_DMA_Start_IT+0x86>
 8002458:	2401      	movs	r4, #1
 800245a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800245e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002462:	b2e4      	uxtb	r4, r4
 8002464:	2c01      	cmp	r4, #1
 8002466:	d005      	beq.n	8002474 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8002468:	2300      	movs	r3, #0
 800246a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800246e:	2002      	movs	r0, #2
}
 8002470:	bc70      	pop	{r4, r5, r6}
 8002472:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002474:	2402      	movs	r4, #2
 8002476:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247a:	2400      	movs	r4, #0
 800247c:	6544      	str	r4, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800247e:	6806      	ldr	r6, [r0, #0]
 8002480:	6834      	ldr	r4, [r6, #0]
 8002482:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002486:	6034      	str	r4, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 8002488:	6804      	ldr	r4, [r0, #0]
 800248a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800248c:	6883      	ldr	r3, [r0, #8]
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	d01a      	beq.n	80024c8 <HAL_DMA_Start_IT+0x7c>
    hdma->Instance->PAR = SrcAddress;
 8002492:	6803      	ldr	r3, [r0, #0]
 8002494:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002496:	6803      	ldr	r3, [r0, #0]
 8002498:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800249c:	233f      	movs	r3, #63	; 0x3f
 800249e:	4093      	lsls	r3, r2
 80024a0:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024a2:	6802      	ldr	r2, [r0, #0]
 80024a4:	6813      	ldr	r3, [r2, #0]
 80024a6:	f043 0316 	orr.w	r3, r3, #22
 80024aa:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024ae:	b123      	cbz	r3, 80024ba <HAL_DMA_Start_IT+0x6e>
      hdma->Instance->CR  |= DMA_IT_HT;
 80024b0:	6802      	ldr	r2, [r0, #0]
 80024b2:	6813      	ldr	r3, [r2, #0]
 80024b4:	f043 0308 	orr.w	r3, r3, #8
 80024b8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80024ba:	6802      	ldr	r2, [r0, #0]
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2000      	movs	r0, #0
 80024c6:	e7d3      	b.n	8002470 <HAL_DMA_Start_IT+0x24>
    hdma->Instance->PAR = DstAddress;
 80024c8:	6803      	ldr	r3, [r0, #0]
 80024ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80024cc:	6803      	ldr	r3, [r0, #0]
 80024ce:	60d9      	str	r1, [r3, #12]
 80024d0:	e7e3      	b.n	800249a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80024d2:	2002      	movs	r0, #2
 80024d4:	e7cc      	b.n	8002470 <HAL_DMA_Start_IT+0x24>
	...

080024d8 <HAL_DMA_IRQHandler>:
{
 80024d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024da:	b083      	sub	sp, #12
 80024dc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024e2:	4b72      	ldr	r3, [pc, #456]	; (80026ac <HAL_DMA_IRQHandler+0x1d4>)
 80024e4:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e6:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80024e8:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ea:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80024ec:	2308      	movs	r3, #8
 80024ee:	4093      	lsls	r3, r2
 80024f0:	422b      	tst	r3, r5
 80024f2:	d010      	beq.n	8002516 <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024f4:	6803      	ldr	r3, [r0, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f012 0f04 	tst.w	r2, #4
 80024fc:	d00b      	beq.n	8002516 <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	f022 0204 	bic.w	r2, r2, #4
 8002504:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002506:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002508:	2308      	movs	r3, #8
 800250a:	4093      	lsls	r3, r2
 800250c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800250e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002516:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002518:	2301      	movs	r3, #1
 800251a:	4093      	lsls	r3, r2
 800251c:	422b      	tst	r3, r5
 800251e:	d009      	beq.n	8002534 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002520:	6822      	ldr	r2, [r4, #0]
 8002522:	6952      	ldr	r2, [r2, #20]
 8002524:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002528:	d004      	beq.n	8002534 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800252a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800252c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002534:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002536:	2304      	movs	r3, #4
 8002538:	4093      	lsls	r3, r2
 800253a:	422b      	tst	r3, r5
 800253c:	d009      	beq.n	8002552 <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800253e:	6822      	ldr	r2, [r4, #0]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	f012 0f02 	tst.w	r2, #2
 8002546:	d004      	beq.n	8002552 <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002548:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800254a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002552:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002554:	2310      	movs	r3, #16
 8002556:	4093      	lsls	r3, r2
 8002558:	422b      	tst	r3, r5
 800255a:	d024      	beq.n	80025a6 <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800255c:	6822      	ldr	r2, [r4, #0]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	f012 0f08 	tst.w	r2, #8
 8002564:	d01f      	beq.n	80025a6 <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002566:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002570:	d00d      	beq.n	800258e <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002578:	d104      	bne.n	8002584 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 800257a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800257c:	b19b      	cbz	r3, 80025a6 <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 800257e:	4620      	mov	r0, r4
 8002580:	4798      	blx	r3
 8002582:	e010      	b.n	80025a6 <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002584:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002586:	b173      	cbz	r3, 80025a6 <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 8002588:	4620      	mov	r0, r4
 800258a:	4798      	blx	r3
 800258c:	e00b      	b.n	80025a6 <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002594:	d103      	bne.n	800259e <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	f022 0208 	bic.w	r2, r2, #8
 800259c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800259e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025a0:	b10b      	cbz	r3, 80025a6 <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 80025a2:	4620      	mov	r0, r4
 80025a4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80025a8:	2320      	movs	r3, #32
 80025aa:	4093      	lsls	r3, r2
 80025ac:	422b      	tst	r3, r5
 80025ae:	d055      	beq.n	800265c <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025b0:	6822      	ldr	r2, [r4, #0]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	f012 0f10 	tst.w	r2, #16
 80025b8:	d050      	beq.n	800265c <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ba:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025bc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d00e      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80025ce:	d033      	beq.n	8002638 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80025d6:	d12a      	bne.n	800262e <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 80025d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d03e      	beq.n	800265c <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 80025de:	4620      	mov	r0, r4
 80025e0:	4798      	blx	r3
 80025e2:	e03b      	b.n	800265c <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	6813      	ldr	r3, [r2, #0]
 80025e8:	f023 0316 	bic.w	r3, r3, #22
 80025ec:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	6953      	ldr	r3, [r2, #20]
 80025f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025f6:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025fa:	b1a3      	cbz	r3, 8002626 <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	6813      	ldr	r3, [r2, #0]
 8002600:	f023 0308 	bic.w	r3, r3, #8
 8002604:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002606:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002608:	233f      	movs	r3, #63	; 0x3f
 800260a:	4093      	lsls	r3, r2
 800260c:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800260e:	2301      	movs	r3, #1
 8002610:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002614:	2300      	movs	r3, #0
 8002616:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800261a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800261c:	2b00      	cmp	r3, #0
 800261e:	d043      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002620:	4620      	mov	r0, r4
 8002622:	4798      	blx	r3
 8002624:	e040      	b.n	80026a8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002626:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e7      	bne.n	80025fc <HAL_DMA_IRQHandler+0x124>
 800262c:	e7eb      	b.n	8002606 <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 800262e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002630:	b1a3      	cbz	r3, 800265c <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8002632:	4620      	mov	r0, r4
 8002634:	4798      	blx	r3
 8002636:	e011      	b.n	800265c <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800263e:	d109      	bne.n	8002654 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	f022 0210 	bic.w	r2, r2, #16
 8002646:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002648:	2301      	movs	r3, #1
 800264a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800264e:	2300      	movs	r3, #0
 8002650:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002654:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002656:	b10b      	cbz	r3, 800265c <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8002658:	4620      	mov	r0, r4
 800265a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800265c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800265e:	b31b      	cbz	r3, 80026a8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002660:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002662:	f013 0f01 	tst.w	r3, #1
 8002666:	d01b      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_DMA_IRQHandler+0x1d8>)
 800266a:	fba3 3606 	umull	r3, r6, r3, r6
 800266e:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8002670:	2305      	movs	r3, #5
 8002672:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002676:	6822      	ldr	r2, [r4, #0]
 8002678:	6813      	ldr	r3, [r2, #0]
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002680:	9b01      	ldr	r3, [sp, #4]
 8002682:	3301      	adds	r3, #1
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	42b3      	cmp	r3, r6
 8002688:	d804      	bhi.n	8002694 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f013 0f01 	tst.w	r3, #1
 8002692:	d1f5      	bne.n	8002680 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8002694:	2301      	movs	r3, #1
 8002696:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800269a:	2300      	movs	r3, #0
 800269c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80026a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80026a2:	b10b      	cbz	r3, 80026a8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80026a4:	4620      	mov	r0, r4
 80026a6:	4798      	blx	r3
}
 80026a8:	b003      	add	sp, #12
 80026aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ac:	20000008 	.word	0x20000008
 80026b0:	1b4e81b5 	.word	0x1b4e81b5

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b8:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026bc:	4e73      	ldr	r6, [pc, #460]	; (800288c <HAL_GPIO_Init+0x1d8>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026be:	4d74      	ldr	r5, [pc, #464]	; (8002890 <HAL_GPIO_Init+0x1dc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c0:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8002898 <HAL_GPIO_Init+0x1e4>
 80026c4:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 800289c <HAL_GPIO_Init+0x1e8>
 80026c8:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80028a0 <HAL_GPIO_Init+0x1ec>
 80026cc:	e049      	b.n	8002762 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR; 
 80026ce:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d2:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f20b 	lsl.w	r2, r2, fp
 80026dc:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e0:	68ca      	ldr	r2, [r1, #12]
 80026e2:	fa02 f20b 	lsl.w	r2, r2, fp
 80026e6:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->OSPEEDR = temp;
 80026ea:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80026ec:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ee:	ea22 0a04 	bic.w	sl, r2, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f2:	684a      	ldr	r2, [r1, #4]
 80026f4:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80026f8:	409c      	lsls	r4, r3
 80026fa:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OTYPER = temp;
 80026fe:	6044      	str	r4, [r0, #4]
 8002700:	e03d      	b.n	800277e <HAL_GPIO_Init+0xca>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002702:	2400      	movs	r4, #0
 8002704:	fa04 f40b 	lsl.w	r4, r4, fp
 8002708:	ea44 040a 	orr.w	r4, r4, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800270c:	6094      	str	r4, [r2, #8]
        temp = EXTI->RTSR;
 800270e:	68ac      	ldr	r4, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8002710:	ea6f 0208 	mvn.w	r2, r8
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002714:	684f      	ldr	r7, [r1, #4]
 8002716:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800271a:	bf0c      	ite	eq
 800271c:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 800271e:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->RTSR = temp;
 8002722:	60ac      	str	r4, [r5, #8]

        temp = EXTI->FTSR;
 8002724:	68ec      	ldr	r4, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002726:	684f      	ldr	r7, [r1, #4]
 8002728:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 800272c:	bf0c      	ite	eq
 800272e:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 8002730:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->FTSR = temp;
 8002734:	60ec      	str	r4, [r5, #12]

        temp = EXTI->EMR;
 8002736:	686c      	ldr	r4, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002738:	684f      	ldr	r7, [r1, #4]
 800273a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800273e:	bf0c      	ite	eq
 8002740:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 8002742:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->EMR = temp;
 8002746:	606c      	str	r4, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002748:	682c      	ldr	r4, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800274a:	684f      	ldr	r7, [r1, #4]
 800274c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002750:	bf0c      	ite	eq
 8002752:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 8002754:	ea48 0204 	orrne.w	r2, r8, r4
        }
        EXTI->IMR = temp;
 8002758:	602a      	str	r2, [r5, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275a:	3301      	adds	r3, #1
 800275c:	2b10      	cmp	r3, #16
 800275e:	f000 8091 	beq.w	8002884 <HAL_GPIO_Init+0x1d0>
    ioposition = 0x01U << position;
 8002762:	2401      	movs	r4, #1
 8002764:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002766:	680a      	ldr	r2, [r1, #0]
 8002768:	ea04 0802 	and.w	r8, r4, r2
    if(iocurrent == ioposition)
 800276c:	ea34 0202 	bics.w	r2, r4, r2
 8002770:	d1f3      	bne.n	800275a <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002772:	684a      	ldr	r2, [r1, #4]
 8002774:	f002 0203 	and.w	r2, r2, #3
 8002778:	3a01      	subs	r2, #1
 800277a:	2a01      	cmp	r2, #1
 800277c:	d9a7      	bls.n	80026ce <HAL_GPIO_Init+0x1a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277e:	684a      	ldr	r2, [r1, #4]
 8002780:	f002 0203 	and.w	r2, r2, #3
 8002784:	2a03      	cmp	r2, #3
 8002786:	d025      	beq.n	80027d4 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8002788:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800278a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800278e:	2203      	movs	r2, #3
 8002790:	fa02 f20a 	lsl.w	r2, r2, sl
 8002794:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002798:	688a      	ldr	r2, [r1, #8]
 800279a:	fa02 f20a 	lsl.w	r2, r2, sl
 800279e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80027a0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a2:	684a      	ldr	r2, [r1, #4]
 80027a4:	f002 0203 	and.w	r2, r2, #3
 80027a8:	2a02      	cmp	r2, #2
 80027aa:	d113      	bne.n	80027d4 <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3U];
 80027ac:	08dc      	lsrs	r4, r3, #3
 80027ae:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80027b2:	f8d4 a020 	ldr.w	sl, [r4, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b6:	f003 0207 	and.w	r2, r3, #7
 80027ba:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f20b 	lsl.w	r2, r2, fp
 80027c4:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c8:	690a      	ldr	r2, [r1, #16]
 80027ca:	fa02 f20b 	lsl.w	r2, r2, fp
 80027ce:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 80027d2:	6222      	str	r2, [r4, #32]
      temp = GPIOx->MODER;
 80027d4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f20a 	lsl.w	r2, r2, sl
 80027e0:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e4:	684a      	ldr	r2, [r1, #4]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	fa02 f20a 	lsl.w	r2, r2, sl
 80027ee:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80027f0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027f2:	684a      	ldr	r2, [r1, #4]
 80027f4:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80027f8:	d0af      	beq.n	800275a <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2200      	movs	r2, #0
 80027fc:	9201      	str	r2, [sp, #4]
 80027fe:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8002800:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002804:	6472      	str	r2, [r6, #68]	; 0x44
 8002806:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8002808:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800280c:	9201      	str	r2, [sp, #4]
 800280e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002810:	f023 0203 	bic.w	r2, r3, #3
 8002814:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002818:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800281c:	f8d2 a008 	ldr.w	sl, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002820:	f003 0403 	and.w	r4, r3, #3
 8002824:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002828:	240f      	movs	r4, #15
 800282a:	fa04 f40b 	lsl.w	r4, r4, fp
 800282e:	ea2a 0a04 	bic.w	sl, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002832:	4c18      	ldr	r4, [pc, #96]	; (8002894 <HAL_GPIO_Init+0x1e0>)
 8002834:	42a0      	cmp	r0, r4
 8002836:	f43f af64 	beq.w	8002702 <HAL_GPIO_Init+0x4e>
 800283a:	4560      	cmp	r0, ip
 800283c:	d016      	beq.n	800286c <HAL_GPIO_Init+0x1b8>
 800283e:	4570      	cmp	r0, lr
 8002840:	d016      	beq.n	8002870 <HAL_GPIO_Init+0x1bc>
 8002842:	4548      	cmp	r0, r9
 8002844:	d016      	beq.n	8002874 <HAL_GPIO_Init+0x1c0>
 8002846:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800284a:	42a0      	cmp	r0, r4
 800284c:	d014      	beq.n	8002878 <HAL_GPIO_Init+0x1c4>
 800284e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002852:	42a0      	cmp	r0, r4
 8002854:	d012      	beq.n	800287c <HAL_GPIO_Init+0x1c8>
 8002856:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800285a:	42a0      	cmp	r0, r4
 800285c:	d010      	beq.n	8002880 <HAL_GPIO_Init+0x1cc>
 800285e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002862:	42a0      	cmp	r0, r4
 8002864:	bf0c      	ite	eq
 8002866:	2407      	moveq	r4, #7
 8002868:	2408      	movne	r4, #8
 800286a:	e74b      	b.n	8002704 <HAL_GPIO_Init+0x50>
 800286c:	2401      	movs	r4, #1
 800286e:	e749      	b.n	8002704 <HAL_GPIO_Init+0x50>
 8002870:	2402      	movs	r4, #2
 8002872:	e747      	b.n	8002704 <HAL_GPIO_Init+0x50>
 8002874:	2403      	movs	r4, #3
 8002876:	e745      	b.n	8002704 <HAL_GPIO_Init+0x50>
 8002878:	2404      	movs	r4, #4
 800287a:	e743      	b.n	8002704 <HAL_GPIO_Init+0x50>
 800287c:	2405      	movs	r4, #5
 800287e:	e741      	b.n	8002704 <HAL_GPIO_Init+0x50>
 8002880:	2406      	movs	r4, #6
 8002882:	e73f      	b.n	8002704 <HAL_GPIO_Init+0x50>
      }
    }
  }
}
 8002884:	b003      	add	sp, #12
 8002886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	40013c00 	.word	0x40013c00
 8002894:	40020000 	.word	0x40020000
 8002898:	40020400 	.word	0x40020400
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00

080028a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a4:	b10a      	cbz	r2, 80028aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	6181      	str	r1, [r0, #24]
 80028a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028aa:	0409      	lsls	r1, r1, #16
 80028ac:	6181      	str	r1, [r0, #24]
  }
}
 80028ae:	4770      	bx	lr

080028b0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b2:	ea01 0203 	and.w	r2, r1, r3
 80028b6:	ea21 0103 	bic.w	r1, r1, r3
 80028ba:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80028be:	6181      	str	r1, [r0, #24]
}
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c4:	2800      	cmp	r0, #0
 80028c6:	f000 81e2 	beq.w	8002c8e <HAL_RCC_OscConfig+0x3ca>
{
 80028ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	6803      	ldr	r3, [r0, #0]
 80028d4:	f013 0f01 	tst.w	r3, #1
 80028d8:	d03b      	beq.n	8002952 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028da:	4ba7      	ldr	r3, [pc, #668]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d02c      	beq.n	8002940 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e6:	4ba4      	ldr	r3, [pc, #656]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d021      	beq.n	8002936 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f2:	6863      	ldr	r3, [r4, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d04f      	beq.n	800299a <HAL_RCC_OscConfig+0xd6>
 80028fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fe:	d052      	beq.n	80029a6 <HAL_RCC_OscConfig+0xe2>
 8002900:	4b9d      	ldr	r3, [pc, #628]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002910:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002912:	6863      	ldr	r3, [r4, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d050      	beq.n	80029ba <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe fe18 	bl	800154c <HAL_GetTick>
 800291c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4e96      	ldr	r6, [pc, #600]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002920:	6833      	ldr	r3, [r6, #0]
 8002922:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002926:	d114      	bne.n	8002952 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fe10 	bl	800154c <HAL_GetTick>
 800292c:	1b40      	subs	r0, r0, r5
 800292e:	2864      	cmp	r0, #100	; 0x64
 8002930:	d9f6      	bls.n	8002920 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8002932:	2003      	movs	r0, #3
 8002934:	e1b2      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002936:	4b90      	ldr	r3, [pc, #576]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800293e:	d0d8      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	4b8d      	ldr	r3, [pc, #564]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002948:	d003      	beq.n	8002952 <HAL_RCC_OscConfig+0x8e>
 800294a:	6863      	ldr	r3, [r4, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 81a0 	beq.w	8002c92 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	f013 0f02 	tst.w	r3, #2
 8002958:	d054      	beq.n	8002a04 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800295a:	4b87      	ldr	r3, [pc, #540]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f013 0f0c 	tst.w	r3, #12
 8002962:	d03e      	beq.n	80029e2 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002964:	4b84      	ldr	r3, [pc, #528]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800296c:	2b08      	cmp	r3, #8
 800296e:	d033      	beq.n	80029d8 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002970:	68e3      	ldr	r3, [r4, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d067      	beq.n	8002a46 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002976:	4b81      	ldr	r3, [pc, #516]	; (8002b7c <HAL_RCC_OscConfig+0x2b8>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fde6 	bl	800154c <HAL_GetTick>
 8002980:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	4e7d      	ldr	r6, [pc, #500]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002984:	6833      	ldr	r3, [r6, #0]
 8002986:	f013 0f02 	tst.w	r3, #2
 800298a:	d153      	bne.n	8002a34 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298c:	f7fe fdde 	bl	800154c <HAL_GetTick>
 8002990:	1b40      	subs	r0, r0, r5
 8002992:	2802      	cmp	r0, #2
 8002994:	d9f6      	bls.n	8002984 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8002996:	2003      	movs	r0, #3
 8002998:	e180      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299a:	4a77      	ldr	r2, [pc, #476]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 800299c:	6813      	ldr	r3, [r2, #0]
 800299e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e7b5      	b.n	8002912 <HAL_RCC_OscConfig+0x4e>
 80029a6:	4b74      	ldr	r3, [pc, #464]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e7ab      	b.n	8002912 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80029ba:	f7fe fdc7 	bl	800154c <HAL_GetTick>
 80029be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c0:	4e6d      	ldr	r6, [pc, #436]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 80029c2:	6833      	ldr	r3, [r6, #0]
 80029c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029c8:	d0c3      	beq.n	8002952 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ca:	f7fe fdbf 	bl	800154c <HAL_GetTick>
 80029ce:	1b40      	subs	r0, r0, r5
 80029d0:	2864      	cmp	r0, #100	; 0x64
 80029d2:	d9f6      	bls.n	80029c2 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 80029d4:	2003      	movs	r0, #3
 80029d6:	e161      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d8:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80029e0:	d1c6      	bne.n	8002970 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b65      	ldr	r3, [pc, #404]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f013 0f02 	tst.w	r3, #2
 80029ea:	d003      	beq.n	80029f4 <HAL_RCC_OscConfig+0x130>
 80029ec:	68e3      	ldr	r3, [r4, #12]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	f040 8151 	bne.w	8002c96 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4a60      	ldr	r2, [pc, #384]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 80029f6:	6813      	ldr	r3, [r2, #0]
 80029f8:	6921      	ldr	r1, [r4, #16]
 80029fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a02:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	f013 0f08 	tst.w	r3, #8
 8002a0a:	d040      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a0c:	6963      	ldr	r3, [r4, #20]
 8002a0e:	b363      	cbz	r3, 8002a6a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a10:	4b5b      	ldr	r3, [pc, #364]	; (8002b80 <HAL_RCC_OscConfig+0x2bc>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7fe fd99 	bl	800154c <HAL_GetTick>
 8002a1a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1c:	4e56      	ldr	r6, [pc, #344]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002a1e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002a20:	f013 0f02 	tst.w	r3, #2
 8002a24:	d133      	bne.n	8002a8e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a26:	f7fe fd91 	bl	800154c <HAL_GetTick>
 8002a2a:	1b40      	subs	r0, r0, r5
 8002a2c:	2802      	cmp	r0, #2
 8002a2e:	d9f6      	bls.n	8002a1e <HAL_RCC_OscConfig+0x15a>
        {
          return HAL_TIMEOUT;
 8002a30:	2003      	movs	r0, #3
 8002a32:	e133      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4a50      	ldr	r2, [pc, #320]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002a36:	6813      	ldr	r3, [r2, #0]
 8002a38:	6921      	ldr	r1, [r4, #16]
 8002a3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	e7de      	b.n	8002a04 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b4d      	ldr	r3, [pc, #308]	; (8002b7c <HAL_RCC_OscConfig+0x2b8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fd7e 	bl	800154c <HAL_GetTick>
 8002a50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	4e49      	ldr	r6, [pc, #292]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002a54:	6833      	ldr	r3, [r6, #0]
 8002a56:	f013 0f02 	tst.w	r3, #2
 8002a5a:	d0d3      	beq.n	8002a04 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5c:	f7fe fd76 	bl	800154c <HAL_GetTick>
 8002a60:	1b40      	subs	r0, r0, r5
 8002a62:	2802      	cmp	r0, #2
 8002a64:	d9f6      	bls.n	8002a54 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8002a66:	2003      	movs	r0, #3
 8002a68:	e118      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6a:	4b45      	ldr	r3, [pc, #276]	; (8002b80 <HAL_RCC_OscConfig+0x2bc>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7fe fd6c 	bl	800154c <HAL_GetTick>
 8002a74:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a76:	4e40      	ldr	r6, [pc, #256]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002a78:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002a7a:	f013 0f02 	tst.w	r3, #2
 8002a7e:	d006      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe fd64 	bl	800154c <HAL_GetTick>
 8002a84:	1b40      	subs	r0, r0, r5
 8002a86:	2802      	cmp	r0, #2
 8002a88:	d9f6      	bls.n	8002a78 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002a8a:	2003      	movs	r0, #3
 8002a8c:	e106      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	f013 0f04 	tst.w	r3, #4
 8002a94:	d079      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a9e:	d10d      	bne.n	8002abc <HAL_RCC_OscConfig+0x1f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ab8:	2501      	movs	r5, #1
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x1fa>
    FlagStatus       pwrclkchanged = RESET;
 8002abc:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <HAL_RCC_OscConfig+0x2c0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ac6:	d021      	beq.n	8002b0c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac8:	68a3      	ldr	r3, [r4, #8]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d032      	beq.n	8002b34 <HAL_RCC_OscConfig+0x270>
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d036      	beq.n	8002b40 <HAL_RCC_OscConfig+0x27c>
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002ad4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	671a      	str	r2, [r3, #112]	; 0x70
 8002adc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ade:	f022 0204 	bic.w	r2, r2, #4
 8002ae2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae4:	68a3      	ldr	r3, [r4, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d034      	beq.n	8002b54 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe fd2f 	bl	800154c <HAL_GetTick>
 8002aee:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af0:	4f21      	ldr	r7, [pc, #132]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af8:	f013 0f02 	tst.w	r3, #2
 8002afc:	d144      	bne.n	8002b88 <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fd25 	bl	800154c <HAL_GetTick>
 8002b02:	1b80      	subs	r0, r0, r6
 8002b04:	4540      	cmp	r0, r8
 8002b06:	d9f6      	bls.n	8002af6 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8002b08:	2003      	movs	r0, #3
 8002b0a:	e0c7      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0c:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <HAL_RCC_OscConfig+0x2c0>)
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002b16:	f7fe fd19 	bl	800154c <HAL_GetTick>
 8002b1a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	4f19      	ldr	r7, [pc, #100]	; (8002b84 <HAL_RCC_OscConfig+0x2c0>)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b24:	d1d0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b26:	f7fe fd11 	bl	800154c <HAL_GetTick>
 8002b2a:	1b80      	subs	r0, r0, r6
 8002b2c:	2802      	cmp	r0, #2
 8002b2e:	d9f6      	bls.n	8002b1e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002b30:	2003      	movs	r0, #3
 8002b32:	e0b3      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	4a10      	ldr	r2, [pc, #64]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002b36:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	e7d1      	b.n	8002ae4 <HAL_RCC_OscConfig+0x220>
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
 8002b42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b44:	f042 0204 	orr.w	r2, r2, #4
 8002b48:	671a      	str	r2, [r3, #112]	; 0x70
 8002b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	671a      	str	r2, [r3, #112]	; 0x70
 8002b52:	e7c7      	b.n	8002ae4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b54:	f7fe fcfa 	bl	800154c <HAL_GetTick>
 8002b58:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5a:	4f07      	ldr	r7, [pc, #28]	; (8002b78 <HAL_RCC_OscConfig+0x2b4>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b62:	f013 0f02 	tst.w	r3, #2
 8002b66:	d00f      	beq.n	8002b88 <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fcf0 	bl	800154c <HAL_GetTick>
 8002b6c:	1b80      	subs	r0, r0, r6
 8002b6e:	4540      	cmp	r0, r8
 8002b70:	d9f6      	bls.n	8002b60 <HAL_RCC_OscConfig+0x29c>
        {
          return HAL_TIMEOUT;
 8002b72:	2003      	movs	r0, #3
 8002b74:	e092      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	42470000 	.word	0x42470000
 8002b80:	42470e80 	.word	0x42470e80
 8002b84:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b88:	b9ed      	cbnz	r5, 8002bc6 <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8a:	69a3      	ldr	r3, [r4, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8084 	beq.w	8002c9a <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b92:	4a49      	ldr	r2, [pc, #292]	; (8002cb8 <HAL_RCC_OscConfig+0x3f4>)
 8002b94:	6892      	ldr	r2, [r2, #8]
 8002b96:	f002 020c 	and.w	r2, r2, #12
 8002b9a:	2a08      	cmp	r2, #8
 8002b9c:	d051      	beq.n	8002c42 <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d017      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_RCC_OscConfig+0x3f8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fcd0 	bl	800154c <HAL_GetTick>
 8002bac:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4d42      	ldr	r5, [pc, #264]	; (8002cb8 <HAL_RCC_OscConfig+0x3f4>)
 8002bb0:	682b      	ldr	r3, [r5, #0]
 8002bb2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bb6:	d042      	beq.n	8002c3e <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fcc8 	bl	800154c <HAL_GetTick>
 8002bbc:	1b00      	subs	r0, r0, r4
 8002bbe:	2802      	cmp	r0, #2
 8002bc0:	d9f6      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8002bc2:	2003      	movs	r0, #3
 8002bc4:	e06a      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc6:	4a3c      	ldr	r2, [pc, #240]	; (8002cb8 <HAL_RCC_OscConfig+0x3f4>)
 8002bc8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd0:	e7db      	b.n	8002b8a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b3a      	ldr	r3, [pc, #232]	; (8002cbc <HAL_RCC_OscConfig+0x3f8>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fcb8 	bl	800154c <HAL_GetTick>
 8002bdc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	4e36      	ldr	r6, [pc, #216]	; (8002cb8 <HAL_RCC_OscConfig+0x3f4>)
 8002be0:	6833      	ldr	r3, [r6, #0]
 8002be2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002be6:	d006      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe fcb0 	bl	800154c <HAL_GetTick>
 8002bec:	1b40      	subs	r0, r0, r5
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d9f6      	bls.n	8002be0 <HAL_RCC_OscConfig+0x31c>
            return HAL_TIMEOUT;
 8002bf2:	2003      	movs	r0, #3
 8002bf4:	e052      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bf6:	69e3      	ldr	r3, [r4, #28]
 8002bf8:	6a22      	ldr	r2, [r4, #32]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bfe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c0a:	0852      	lsrs	r2, r2, #1
 8002c0c:	3a01      	subs	r2, #1
 8002c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c12:	4a29      	ldr	r2, [pc, #164]	; (8002cb8 <HAL_RCC_OscConfig+0x3f4>)
 8002c14:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c16:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <HAL_RCC_OscConfig+0x3f8>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fc96 	bl	800154c <HAL_GetTick>
 8002c20:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4d25      	ldr	r5, [pc, #148]	; (8002cb8 <HAL_RCC_OscConfig+0x3f4>)
 8002c24:	682b      	ldr	r3, [r5, #0]
 8002c26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fc8e 	bl	800154c <HAL_GetTick>
 8002c30:	1b00      	subs	r0, r0, r4
 8002c32:	2802      	cmp	r0, #2
 8002c34:	d9f6      	bls.n	8002c24 <HAL_RCC_OscConfig+0x360>
            return HAL_TIMEOUT;
 8002c36:	2003      	movs	r0, #3
 8002c38:	e030      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	e02e      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
 8002c3e:	2000      	movs	r0, #0
 8002c40:	e02c      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d02d      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x3de>
        pll_config = RCC->PLLCFGR;
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <HAL_RCC_OscConfig+0x3f4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4e:	69e2      	ldr	r2, [r4, #28]
 8002c50:	4291      	cmp	r1, r2
 8002c52:	d128      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c58:	6a21      	ldr	r1, [r4, #32]
 8002c5a:	428a      	cmp	r2, r1
 8002c5c:	d125      	bne.n	8002caa <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c60:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002c64:	401a      	ands	r2, r3
 8002c66:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002c6a:	d120      	bne.n	8002cae <HAL_RCC_OscConfig+0x3ea>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002c70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c72:	0852      	lsrs	r2, r2, #1
 8002c74:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c76:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002c7a:	d11a      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x3ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c7e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c82:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8002c86:	bf14      	ite	ne
 8002c88:	2001      	movne	r0, #1
 8002c8a:	2000      	moveq	r0, #0
 8002c8c:	e006      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 8002c8e:	2001      	movs	r0, #1
}
 8002c90:	4770      	bx	lr
        return HAL_ERROR;
 8002c92:	2001      	movs	r0, #1
 8002c94:	e002      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
        return HAL_ERROR;
 8002c96:	2001      	movs	r0, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8002c9a:	2000      	movs	r0, #0
}
 8002c9c:	b002      	add	sp, #8
 8002c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	e7fa      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	e7f8      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
 8002caa:	2001      	movs	r0, #1
 8002cac:	e7f6      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
 8002cae:	2001      	movs	r0, #1
 8002cb0:	e7f4      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	e7f2      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d8>
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	42470060 	.word	0x42470060

08002cc0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002cc0:	4b01      	ldr	r3, [pc, #4]	; (8002cc8 <HAL_RCC_EnableCSS+0x8>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
}
 8002cc6:	4770      	bx	lr
 8002cc8:	4247004c 	.word	0x4247004c

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d053      	beq.n	8002d82 <HAL_RCC_GetSysClockFreq+0xb6>
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d153      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002cec:	d028      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002cf6:	0158      	lsls	r0, r3, #5
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	1ac0      	subs	r0, r0, r3
 8002cfc:	f161 0100 	sbc.w	r1, r1, #0
 8002d00:	018e      	lsls	r6, r1, #6
 8002d02:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8002d06:	0187      	lsls	r7, r0, #6
 8002d08:	1a3c      	subs	r4, r7, r0
 8002d0a:	eb66 0501 	sbc.w	r5, r6, r1
 8002d0e:	00e9      	lsls	r1, r5, #3
 8002d10:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002d14:	00e0      	lsls	r0, r4, #3
 8002d16:	18c0      	adds	r0, r0, r3
 8002d18:	f141 0100 	adc.w	r1, r1, #0
 8002d1c:	024b      	lsls	r3, r1, #9
 8002d1e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002d22:	0244      	lsls	r4, r0, #9
 8002d24:	4620      	mov	r0, r4
 8002d26:	4619      	mov	r1, r3
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f7fd fd5b 	bl	80007e4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d36:	3301      	adds	r3, #1
 8002d38:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002d3a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002d3e:	e023      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d40:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002d48:	015c      	lsls	r4, r3, #5
 8002d4a:	2500      	movs	r5, #0
 8002d4c:	1ae4      	subs	r4, r4, r3
 8002d4e:	f165 0500 	sbc.w	r5, r5, #0
 8002d52:	01ae      	lsls	r6, r5, #6
 8002d54:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002d58:	01a7      	lsls	r7, r4, #6
 8002d5a:	1b38      	subs	r0, r7, r4
 8002d5c:	eb66 0105 	sbc.w	r1, r6, r5
 8002d60:	00cc      	lsls	r4, r1, #3
 8002d62:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8002d66:	00c5      	lsls	r5, r0, #3
 8002d68:	18e8      	adds	r0, r5, r3
 8002d6a:	f144 0100 	adc.w	r1, r4, #0
 8002d6e:	028b      	lsls	r3, r1, #10
 8002d70:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002d74:	0284      	lsls	r4, r0, #10
 8002d76:	4620      	mov	r0, r4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f7fd fd32 	bl	80007e4 <__aeabi_uldivmod>
 8002d80:	e7d5      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x62>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d82:	4803      	ldr	r0, [pc, #12]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d84:	e000      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xbc>
      sysclockfreq = HSI_VALUE;
 8002d86:	4803      	ldr	r0, [pc, #12]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	007a1200 	.word	0x007a1200
 8002d94:	00f42400 	.word	0x00f42400

08002d98 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	f000 809d 	beq.w	8002ed8 <HAL_RCC_ClockConfig+0x140>
{
 8002d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da2:	460d      	mov	r5, r1
 8002da4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da6:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x150>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	428b      	cmp	r3, r1
 8002db0:	d208      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	b2cb      	uxtb	r3, r1
 8002db4:	4a4c      	ldr	r2, [pc, #304]	; (8002ee8 <HAL_RCC_ClockConfig+0x150>)
 8002db6:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db8:	6813      	ldr	r3, [r2, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	428b      	cmp	r3, r1
 8002dc0:	f040 808c 	bne.w	8002edc <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	f013 0f02 	tst.w	r3, #2
 8002dca:	d017      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	f013 0f04 	tst.w	r3, #4
 8002dd0:	d004      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd2:	4a46      	ldr	r2, [pc, #280]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
 8002dd4:	6893      	ldr	r3, [r2, #8]
 8002dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dda:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	f013 0f08 	tst.w	r3, #8
 8002de2:	d004      	beq.n	8002dee <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de4:	4a41      	ldr	r2, [pc, #260]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
 8002de6:	6893      	ldr	r3, [r2, #8]
 8002de8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dec:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dee:	4a3f      	ldr	r2, [pc, #252]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
 8002df0:	6893      	ldr	r3, [r2, #8]
 8002df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df6:	68a1      	ldr	r1, [r4, #8]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	f013 0f01 	tst.w	r3, #1
 8002e02:	d032      	beq.n	8002e6a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e04:	6862      	ldr	r2, [r4, #4]
 8002e06:	2a01      	cmp	r2, #1
 8002e08:	d021      	beq.n	8002e4e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e0a:	1e93      	subs	r3, r2, #2
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d925      	bls.n	8002e5c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	4b36      	ldr	r3, [pc, #216]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f013 0f02 	tst.w	r3, #2
 8002e18:	d062      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1a:	4934      	ldr	r1, [pc, #208]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
 8002e1c:	688b      	ldr	r3, [r1, #8]
 8002e1e:	f023 0303 	bic.w	r3, r3, #3
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002e26:	f7fe fb91 	bl	800154c <HAL_GetTick>
 8002e2a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2c:	4f2f      	ldr	r7, [pc, #188]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	6862      	ldr	r2, [r4, #4]
 8002e3a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002e3e:	d014      	beq.n	8002e6a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e40:	f7fe fb84 	bl	800154c <HAL_GetTick>
 8002e44:	1b80      	subs	r0, r0, r6
 8002e46:	4540      	cmp	r0, r8
 8002e48:	d9f3      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8002e4a:	2003      	movs	r0, #3
 8002e4c:	e042      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e56:	d1e0      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002e58:	2001      	movs	r0, #1
 8002e5a:	e03b      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5c:	4b23      	ldr	r3, [pc, #140]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e64:	d1d9      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002e66:	2001      	movs	r0, #1
 8002e68:	e034      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <HAL_RCC_ClockConfig+0x150>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	42ab      	cmp	r3, r5
 8002e74:	d907      	bls.n	8002e86 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	b2ea      	uxtb	r2, r5
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCC_ClockConfig+0x150>)
 8002e7a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	42ab      	cmp	r3, r5
 8002e84:	d12e      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	f013 0f04 	tst.w	r3, #4
 8002e8c:	d006      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
 8002e90:	6893      	ldr	r3, [r2, #8]
 8002e92:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e96:	68e1      	ldr	r1, [r4, #12]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	f013 0f08 	tst.w	r3, #8
 8002ea2:	d007      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea4:	4a11      	ldr	r2, [pc, #68]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
 8002ea6:	6893      	ldr	r3, [r2, #8]
 8002ea8:	6921      	ldr	r1, [r4, #16]
 8002eaa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002eae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002eb2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb4:	f7ff ff0a 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_RCC_ClockConfig+0x154>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <HAL_RCC_ClockConfig+0x158>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	40d8      	lsrs	r0, r3
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_ClockConfig+0x15c>)
 8002ec8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_ClockConfig+0x160>)
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	f7fe faf1 	bl	80014b4 <HAL_InitTick>
  return HAL_OK;
 8002ed2:	2000      	movs	r0, #0
}
 8002ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002ed8:	2001      	movs	r0, #1
}
 8002eda:	4770      	bx	lr
      return HAL_ERROR;
 8002edc:	2001      	movs	r0, #1
 8002ede:	e7f9      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	e7f7      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	e7f5      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x13c>
 8002ee8:	40023c00 	.word	0x40023c00
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08003668 	.word	0x08003668
 8002ef4:	20000008 	.word	0x20000008
 8002ef8:	20000010 	.word	0x20000010

08002efc <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_RCC_NMI_IRQHandler>:
{
 8002f00:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_RCC_NMI_IRQHandler+0x1c>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f0a:	d100      	bne.n	8002f0e <HAL_RCC_NMI_IRQHandler+0xe>
}
 8002f0c:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8002f0e:	f7ff fff5 	bl	8002efc <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002f12:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002f14:	2280      	movs	r2, #128	; 0x80
 8002f16:	701a      	strb	r2, [r3, #0]
}
 8002f18:	e7f8      	b.n	8002f0c <HAL_RCC_NMI_IRQHandler+0xc>
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	4002380e 	.word	0x4002380e

08002f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f26:	6a03      	ldr	r3, [r0, #32]
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f30:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f32:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f34:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f38:	680d      	ldr	r5, [r1, #0]
 8002f3a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f3c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f40:	688d      	ldr	r5, [r1, #8]
 8002f42:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f44:	4d10      	ldr	r5, [pc, #64]	; (8002f88 <TIM_OC1_SetConfig+0x64>)
 8002f46:	42a8      	cmp	r0, r5
 8002f48:	d00a      	beq.n	8002f60 <TIM_OC1_SetConfig+0x3c>
 8002f4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f4e:	42a8      	cmp	r0, r5
 8002f50:	d112      	bne.n	8002f78 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f52:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f56:	68cd      	ldr	r5, [r1, #12]
 8002f58:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f5a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f5e:	e005      	b.n	8002f6c <TIM_OC1_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f60:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002f64:	68cd      	ldr	r5, [r1, #12]
 8002f66:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f68:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f6c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f70:	694d      	ldr	r5, [r1, #20]
 8002f72:	698e      	ldr	r6, [r1, #24]
 8002f74:	4335      	orrs	r5, r6
 8002f76:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f78:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f7a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f7c:	684a      	ldr	r2, [r1, #4]
 8002f7e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f80:	6203      	str	r3, [r0, #32]
}
 8002f82:	bc70      	pop	{r4, r5, r6}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010000 	.word	0x40010000

08002f8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f8e:	6a03      	ldr	r3, [r0, #32]
 8002f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f94:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f9c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa0:	680d      	ldr	r5, [r1, #0]
 8002fa2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fa8:	688d      	ldr	r5, [r1, #8]
 8002faa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fae:	4d12      	ldr	r5, [pc, #72]	; (8002ff8 <TIM_OC3_SetConfig+0x6c>)
 8002fb0:	42a8      	cmp	r0, r5
 8002fb2:	d00b      	beq.n	8002fcc <TIM_OC3_SetConfig+0x40>
 8002fb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002fb8:	42a8      	cmp	r0, r5
 8002fba:	d115      	bne.n	8002fe8 <TIM_OC3_SetConfig+0x5c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fc0:	68cd      	ldr	r5, [r1, #12]
 8002fc2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fca:	e006      	b.n	8002fda <TIM_OC3_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fd0:	68cd      	ldr	r5, [r1, #12]
 8002fd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fda:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fde:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fe0:	698e      	ldr	r6, [r1, #24]
 8002fe2:	4335      	orrs	r5, r6
 8002fe4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fec:	684a      	ldr	r2, [r1, #4]
 8002fee:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff0:	6203      	str	r3, [r0, #32]
}
 8002ff2:	bc70      	pop	{r4, r5, r6}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40010000 	.word	0x40010000

08002ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ffe:	6a03      	ldr	r3, [r0, #32]
 8003000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003004:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003008:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800300a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800300c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003010:	680d      	ldr	r5, [r1, #0]
 8003012:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003016:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800301a:	688d      	ldr	r5, [r1, #8]
 800301c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003020:	4d09      	ldr	r5, [pc, #36]	; (8003048 <TIM_OC4_SetConfig+0x4c>)
 8003022:	42a8      	cmp	r0, r5
 8003024:	d003      	beq.n	800302e <TIM_OC4_SetConfig+0x32>
 8003026:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800302a:	42a8      	cmp	r0, r5
 800302c:	d104      	bne.n	8003038 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800302e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003032:	694d      	ldr	r5, [r1, #20]
 8003034:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003038:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800303a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800303c:	684a      	ldr	r2, [r1, #4]
 800303e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003040:	6203      	str	r3, [r0, #32]
}
 8003042:	bc30      	pop	{r4, r5}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40010000 	.word	0x40010000

0800304c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800304c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800304e:	4a40      	ldr	r2, [pc, #256]	; (8003150 <TIM_Base_SetConfig+0x104>)
 8003050:	4290      	cmp	r0, r2
 8003052:	d05d      	beq.n	8003110 <TIM_Base_SetConfig+0xc4>
 8003054:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003058:	d031      	beq.n	80030be <TIM_Base_SetConfig+0x72>
 800305a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800305e:	4290      	cmp	r0, r2
 8003060:	d051      	beq.n	8003106 <TIM_Base_SetConfig+0xba>
 8003062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003066:	4290      	cmp	r0, r2
 8003068:	d06d      	beq.n	8003146 <TIM_Base_SetConfig+0xfa>
 800306a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800306e:	4290      	cmp	r0, r2
 8003070:	d064      	beq.n	800313c <TIM_Base_SetConfig+0xf0>
 8003072:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003076:	4290      	cmp	r0, r2
 8003078:	d033      	beq.n	80030e2 <TIM_Base_SetConfig+0x96>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800307e:	4290      	cmp	r0, r2
 8003080:	d021      	beq.n	80030c6 <TIM_Base_SetConfig+0x7a>
 8003082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003086:	4290      	cmp	r0, r2
 8003088:	d01d      	beq.n	80030c6 <TIM_Base_SetConfig+0x7a>
 800308a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800308e:	4290      	cmp	r0, r2
 8003090:	d019      	beq.n	80030c6 <TIM_Base_SetConfig+0x7a>
 8003092:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003096:	4290      	cmp	r0, r2
 8003098:	d015      	beq.n	80030c6 <TIM_Base_SetConfig+0x7a>
 800309a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800309e:	4290      	cmp	r0, r2
 80030a0:	d011      	beq.n	80030c6 <TIM_Base_SetConfig+0x7a>
 80030a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030a6:	4290      	cmp	r0, r2
 80030a8:	d00d      	beq.n	80030c6 <TIM_Base_SetConfig+0x7a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ae:	694a      	ldr	r2, [r1, #20]
 80030b0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80030b2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b4:	688b      	ldr	r3, [r1, #8]
 80030b6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80030b8:	680b      	ldr	r3, [r1, #0]
 80030ba:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030bc:	e03b      	b.n	8003136 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030c2:	684a      	ldr	r2, [r1, #4]
 80030c4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ca:	68ca      	ldr	r2, [r1, #12]
 80030cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d2:	694a      	ldr	r2, [r1, #20]
 80030d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80030d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d8:	688b      	ldr	r3, [r1, #8]
 80030da:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80030dc:	680b      	ldr	r3, [r1, #0]
 80030de:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e0:	e029      	b.n	8003136 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030e6:	684a      	ldr	r2, [r1, #4]
 80030e8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ee:	68ca      	ldr	r2, [r1, #12]
 80030f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f6:	694a      	ldr	r2, [r1, #20]
 80030f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80030fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030fc:	688b      	ldr	r3, [r1, #8]
 80030fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003100:	680b      	ldr	r3, [r1, #0]
 8003102:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003104:	e015      	b.n	8003132 <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800310a:	684a      	ldr	r2, [r1, #4]
 800310c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310e:	e7da      	b.n	80030c6 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003114:	684a      	ldr	r2, [r1, #4]
 8003116:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311c:	68ca      	ldr	r2, [r1, #12]
 800311e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003124:	694a      	ldr	r2, [r1, #20]
 8003126:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003128:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800312a:	688b      	ldr	r3, [r1, #8]
 800312c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800312e:	680b      	ldr	r3, [r1, #0]
 8003130:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003132:	690b      	ldr	r3, [r1, #16]
 8003134:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003136:	2301      	movs	r3, #1
 8003138:	6143      	str	r3, [r0, #20]
}
 800313a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800313c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003140:	684a      	ldr	r2, [r1, #4]
 8003142:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003144:	e7bf      	b.n	80030c6 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800314a:	684a      	ldr	r2, [r1, #4]
 800314c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800314e:	e7ba      	b.n	80030c6 <TIM_Base_SetConfig+0x7a>
 8003150:	40010000 	.word	0x40010000

08003154 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003154:	b340      	cbz	r0, 80031a8 <HAL_TIM_PWM_Init+0x54>
{
 8003156:	b510      	push	{r4, lr}
 8003158:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800315a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800315e:	b1f3      	cbz	r3, 800319e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	2302      	movs	r3, #2
 8003162:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003166:	4621      	mov	r1, r4
 8003168:	f851 0b04 	ldr.w	r0, [r1], #4
 800316c:	f7ff ff6e 	bl	800304c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003170:	2301      	movs	r3, #1
 8003172:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003176:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800317a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800317e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003182:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800318a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800318e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003192:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003196:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800319a:	2000      	movs	r0, #0
}
 800319c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800319e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80031a2:	f7fe f8d5 	bl	8001350 <HAL_TIM_PWM_MspInit>
 80031a6:	e7db      	b.n	8003160 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80031a8:	2001      	movs	r0, #1
}
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d053      	beq.n	8003258 <HAL_TIM_Encoder_Init+0xac>
{
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	460d      	mov	r5, r1
 80031b4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80031b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d047      	beq.n	800324e <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 80031be:	2302      	movs	r3, #2
 80031c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031c4:	6822      	ldr	r2, [r4, #0]
 80031c6:	6893      	ldr	r3, [r2, #8]
 80031c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031cc:	f023 0307 	bic.w	r3, r3, #7
 80031d0:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d2:	4621      	mov	r1, r4
 80031d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80031d8:	f7ff ff38 	bl	800304c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80031dc:	6820      	ldr	r0, [r4, #0]
 80031de:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80031e0:	6982      	ldr	r2, [r0, #24]
  tmpccer = htim->Instance->CCER;
 80031e2:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	431e      	orrs	r6, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031ec:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80031f0:	69ab      	ldr	r3, [r5, #24]
 80031f2:	68a9      	ldr	r1, [r5, #8]
 80031f4:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80031f8:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031fa:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
 80031fe:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003202:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003204:	692b      	ldr	r3, [r5, #16]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800320c:	68e9      	ldr	r1, [r5, #12]
 800320e:	430b      	orrs	r3, r1
 8003210:	6a29      	ldr	r1, [r5, #32]
 8003212:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003216:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003218:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800321c:	6969      	ldr	r1, [r5, #20]
 800321e:	686f      	ldr	r7, [r5, #4]
 8003220:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8003224:	4317      	orrs	r7, r2
  htim->Instance->SMCR = tmpsmcr;
 8003226:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003228:	6822      	ldr	r2, [r4, #0]
 800322a:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	2301      	movs	r3, #1
 8003232:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800323a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800323e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8003246:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800324a:	2000      	movs	r0, #0
}
 800324c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800324e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003252:	f7fe f843 	bl	80012dc <HAL_TIM_Encoder_MspInit>
 8003256:	e7b2      	b.n	80031be <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8003258:	2001      	movs	r0, #1
}
 800325a:	4770      	bx	lr

0800325c <TIM_OC2_SetConfig>:
{
 800325c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325e:	6a03      	ldr	r3, [r0, #32]
 8003260:	f023 0310 	bic.w	r3, r3, #16
 8003264:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003266:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003268:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800326a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800326c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003270:	680d      	ldr	r5, [r1, #0]
 8003272:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003276:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800327a:	688d      	ldr	r5, [r1, #8]
 800327c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003280:	4d11      	ldr	r5, [pc, #68]	; (80032c8 <TIM_OC2_SetConfig+0x6c>)
 8003282:	42a8      	cmp	r0, r5
 8003284:	d00b      	beq.n	800329e <TIM_OC2_SetConfig+0x42>
 8003286:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800328a:	42a8      	cmp	r0, r5
 800328c:	d115      	bne.n	80032ba <TIM_OC2_SetConfig+0x5e>
    tmpccer &= ~TIM_CCER_CC2NP;
 800328e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003292:	68cd      	ldr	r5, [r1, #12]
 8003294:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329c:	e006      	b.n	80032ac <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 800329e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032a2:	68cd      	ldr	r5, [r1, #12]
 80032a4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80032a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032ac:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032b0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032b2:	698e      	ldr	r6, [r1, #24]
 80032b4:	4335      	orrs	r5, r6
 80032b6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80032ba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80032bc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80032be:	684a      	ldr	r2, [r1, #4]
 80032c0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80032c2:	6203      	str	r3, [r0, #32]
}
 80032c4:	bc70      	pop	{r4, r5, r6}
 80032c6:	4770      	bx	lr
 80032c8:	40010000 	.word	0x40010000

080032cc <HAL_TIM_PWM_ConfigChannel>:
{
 80032cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80032ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d066      	beq.n	80033a4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80032d6:	4604      	mov	r4, r0
 80032d8:	460d      	mov	r5, r1
 80032da:	2301      	movs	r3, #1
 80032dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80032e0:	2a0c      	cmp	r2, #12
 80032e2:	d85a      	bhi.n	800339a <HAL_TIM_PWM_ConfigChannel+0xce>
 80032e4:	e8df f002 	tbb	[pc, r2]
 80032e8:	59595907 	.word	0x59595907
 80032ec:	5959591b 	.word	0x5959591b
 80032f0:	59595930 	.word	0x59595930
 80032f4:	44          	.byte	0x44
 80032f5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f6:	6800      	ldr	r0, [r0, #0]
 80032f8:	f7ff fe14 	bl	8002f24 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	6993      	ldr	r3, [r2, #24]
 8003300:	f043 0308 	orr.w	r3, r3, #8
 8003304:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	6993      	ldr	r3, [r2, #24]
 800330a:	f023 0304 	bic.w	r3, r3, #4
 800330e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003310:	6822      	ldr	r2, [r4, #0]
 8003312:	6993      	ldr	r3, [r2, #24]
 8003314:	6929      	ldr	r1, [r5, #16]
 8003316:	430b      	orrs	r3, r1
 8003318:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800331a:	2000      	movs	r0, #0
      break;
 800331c:	e03e      	b.n	800339c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800331e:	6800      	ldr	r0, [r0, #0]
 8003320:	f7ff ff9c 	bl	800325c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003324:	6822      	ldr	r2, [r4, #0]
 8003326:	6993      	ldr	r3, [r2, #24]
 8003328:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800332c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800332e:	6822      	ldr	r2, [r4, #0]
 8003330:	6993      	ldr	r3, [r2, #24]
 8003332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003336:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	6993      	ldr	r3, [r2, #24]
 800333c:	6929      	ldr	r1, [r5, #16]
 800333e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003342:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2000      	movs	r0, #0
      break;
 8003346:	e029      	b.n	800339c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003348:	6800      	ldr	r0, [r0, #0]
 800334a:	f7ff fe1f 	bl	8002f8c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800334e:	6822      	ldr	r2, [r4, #0]
 8003350:	69d3      	ldr	r3, [r2, #28]
 8003352:	f043 0308 	orr.w	r3, r3, #8
 8003356:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	69d3      	ldr	r3, [r2, #28]
 800335c:	f023 0304 	bic.w	r3, r3, #4
 8003360:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	69d3      	ldr	r3, [r2, #28]
 8003366:	6929      	ldr	r1, [r5, #16]
 8003368:	430b      	orrs	r3, r1
 800336a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2000      	movs	r0, #0
      break;
 800336e:	e015      	b.n	800339c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003370:	6800      	ldr	r0, [r0, #0]
 8003372:	f7ff fe43 	bl	8002ffc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	69d3      	ldr	r3, [r2, #28]
 800337a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800337e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003380:	6822      	ldr	r2, [r4, #0]
 8003382:	69d3      	ldr	r3, [r2, #28]
 8003384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003388:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	69d3      	ldr	r3, [r2, #28]
 800338e:	6929      	ldr	r1, [r5, #16]
 8003390:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003394:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003396:	2000      	movs	r0, #0
      break;
 8003398:	e000      	b.n	800339c <HAL_TIM_PWM_ConfigChannel+0xd0>
  __HAL_LOCK(htim);
 800339a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800339c:	2300      	movs	r3, #0
 800339e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80033a2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80033a4:	2002      	movs	r0, #2
 80033a6:	e7fc      	b.n	80033a2 <HAL_TIM_PWM_ConfigChannel+0xd6>

080033a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033aa:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033ae:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b0:	2401      	movs	r4, #1
 80033b2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80033b4:	ea23 0304 	bic.w	r3, r3, r4
 80033b8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033ba:	6a03      	ldr	r3, [r0, #32]
 80033bc:	408a      	lsls	r2, r1
 80033be:	431a      	orrs	r2, r3
 80033c0:	6202      	str	r2, [r0, #32]
}
 80033c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIM_PWM_Start>:
{
 80033c8:	b510      	push	{r4, lr}
 80033ca:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033cc:	460b      	mov	r3, r1
 80033ce:	bba1      	cbnz	r1, 800343a <HAL_TIM_PWM_Start+0x72>
 80033d0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	2a01      	cmp	r2, #1
 80033d8:	d161      	bne.n	800349e <HAL_TIM_PWM_Start+0xd6>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033da:	2202      	movs	r2, #2
 80033dc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033e0:	2201      	movs	r2, #1
 80033e2:	4619      	mov	r1, r3
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	f7ff ffdf 	bl	80033a8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <HAL_TIM_PWM_Start+0xec>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d042      	beq.n	8003478 <HAL_TIM_PWM_Start+0xb0>
 80033f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d03e      	beq.n	8003478 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fe:	d043      	beq.n	8003488 <HAL_TIM_PWM_Start+0xc0>
 8003400:	4a2d      	ldr	r2, [pc, #180]	; (80034b8 <HAL_TIM_PWM_Start+0xf0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d040      	beq.n	8003488 <HAL_TIM_PWM_Start+0xc0>
 8003406:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800340a:	4293      	cmp	r3, r2
 800340c:	d03c      	beq.n	8003488 <HAL_TIM_PWM_Start+0xc0>
 800340e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003412:	4293      	cmp	r3, r2
 8003414:	d038      	beq.n	8003488 <HAL_TIM_PWM_Start+0xc0>
 8003416:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800341a:	4293      	cmp	r3, r2
 800341c:	d034      	beq.n	8003488 <HAL_TIM_PWM_Start+0xc0>
 800341e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003422:	4293      	cmp	r3, r2
 8003424:	d030      	beq.n	8003488 <HAL_TIM_PWM_Start+0xc0>
 8003426:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800342a:	4293      	cmp	r3, r2
 800342c:	d02c      	beq.n	8003488 <HAL_TIM_PWM_Start+0xc0>
    __HAL_TIM_ENABLE(htim);
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003436:	2000      	movs	r0, #0
 8003438:	e030      	b.n	800349c <HAL_TIM_PWM_Start+0xd4>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800343a:	2904      	cmp	r1, #4
 800343c:	d00a      	beq.n	8003454 <HAL_TIM_PWM_Start+0x8c>
 800343e:	2908      	cmp	r1, #8
 8003440:	d011      	beq.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 8003442:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	2a01      	cmp	r2, #1
 800344a:	d12e      	bne.n	80034aa <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800344c:	2202      	movs	r2, #2
 800344e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 8003452:	e7c5      	b.n	80033e0 <HAL_TIM_PWM_Start+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003454:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	2a01      	cmp	r2, #1
 800345c:	d121      	bne.n	80034a2 <HAL_TIM_PWM_Start+0xda>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800345e:	2202      	movs	r2, #2
 8003460:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
 8003464:	e7bc      	b.n	80033e0 <HAL_TIM_PWM_Start+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003466:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	2a01      	cmp	r2, #1
 800346e:	d11a      	bne.n	80034a6 <HAL_TIM_PWM_Start+0xde>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003470:	2202      	movs	r2, #2
 8003472:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8003476:	e7b3      	b.n	80033e0 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8003478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800347a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347e:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <HAL_TIM_PWM_Start+0xec>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d1b8      	bne.n	80033fa <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348e:	2a06      	cmp	r2, #6
 8003490:	d00d      	beq.n	80034ae <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800349a:	2000      	movs	r0, #0
}
 800349c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800349e:	2001      	movs	r0, #1
 80034a0:	e7fc      	b.n	800349c <HAL_TIM_PWM_Start+0xd4>
 80034a2:	2001      	movs	r0, #1
 80034a4:	e7fa      	b.n	800349c <HAL_TIM_PWM_Start+0xd4>
 80034a6:	2001      	movs	r0, #1
 80034a8:	e7f8      	b.n	800349c <HAL_TIM_PWM_Start+0xd4>
 80034aa:	2001      	movs	r0, #1
 80034ac:	e7f6      	b.n	800349c <HAL_TIM_PWM_Start+0xd4>
  return HAL_OK;
 80034ae:	2000      	movs	r0, #0
 80034b0:	e7f4      	b.n	800349c <HAL_TIM_PWM_Start+0xd4>
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40000400 	.word	0x40000400

080034bc <HAL_TIM_Encoder_Start>:
{
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80034c0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80034c4:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80034c6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80034ca:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80034ce:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80034d0:	f894 5043 	ldrb.w	r5, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 80034d4:	b991      	cbnz	r1, 80034fc <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034d6:	2801      	cmp	r0, #1
 80034d8:	d13e      	bne.n	8003558 <HAL_TIM_Encoder_Start+0x9c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80034da:	2a01      	cmp	r2, #1
 80034dc:	d13d      	bne.n	800355a <HAL_TIM_Encoder_Start+0x9e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034de:	2302      	movs	r3, #2
 80034e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034e8:	6820      	ldr	r0, [r4, #0]
 80034ea:	f7ff ff5d 	bl	80033a8 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80034ee:	6822      	ldr	r2, [r4, #0]
 80034f0:	6813      	ldr	r3, [r2, #0]
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80034f8:	2000      	movs	r0, #0
 80034fa:	e02e      	b.n	800355a <HAL_TIM_Encoder_Start+0x9e>
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	b2ed      	uxtb	r5, r5
  else if (Channel == TIM_CHANNEL_2)
 8003500:	2904      	cmp	r1, #4
 8003502:	d01a      	beq.n	800353a <HAL_TIM_Encoder_Start+0x7e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003504:	2801      	cmp	r0, #1
 8003506:	d12d      	bne.n	8003564 <HAL_TIM_Encoder_Start+0xa8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003508:	2b01      	cmp	r3, #1
 800350a:	d126      	bne.n	800355a <HAL_TIM_Encoder_Start+0x9e>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800350c:	2a01      	cmp	r2, #1
 800350e:	d12b      	bne.n	8003568 <HAL_TIM_Encoder_Start+0xac>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003510:	2d01      	cmp	r5, #1
 8003512:	d12b      	bne.n	800356c <HAL_TIM_Encoder_Start+0xb0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003514:	2302      	movs	r3, #2
 8003516:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800351a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800351e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003526:	2100      	movs	r1, #0
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	f7ff ff3d 	bl	80033a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800352e:	2201      	movs	r2, #1
 8003530:	2104      	movs	r1, #4
 8003532:	6820      	ldr	r0, [r4, #0]
 8003534:	f7ff ff38 	bl	80033a8 <TIM_CCxChannelCmd>
      break;
 8003538:	e7d9      	b.n	80034ee <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10e      	bne.n	800355c <HAL_TIM_Encoder_Start+0xa0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800353e:	2d01      	cmp	r5, #1
 8003540:	d10e      	bne.n	8003560 <HAL_TIM_Encoder_Start+0xa4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003542:	2302      	movs	r3, #2
 8003544:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800354c:	2201      	movs	r2, #1
 800354e:	2104      	movs	r1, #4
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	f7ff ff29 	bl	80033a8 <TIM_CCxChannelCmd>
      break;
 8003556:	e7ca      	b.n	80034ee <HAL_TIM_Encoder_Start+0x32>
      return HAL_ERROR;
 8003558:	2001      	movs	r0, #1
}
 800355a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800355c:	2001      	movs	r0, #1
 800355e:	e7fc      	b.n	800355a <HAL_TIM_Encoder_Start+0x9e>
 8003560:	4618      	mov	r0, r3
 8003562:	e7fa      	b.n	800355a <HAL_TIM_Encoder_Start+0x9e>
      return HAL_ERROR;
 8003564:	2001      	movs	r0, #1
 8003566:	e7f8      	b.n	800355a <HAL_TIM_Encoder_Start+0x9e>
 8003568:	4618      	mov	r0, r3
 800356a:	e7f6      	b.n	800355a <HAL_TIM_Encoder_Start+0x9e>
 800356c:	4610      	mov	r0, r2
 800356e:	e7f4      	b.n	800355a <HAL_TIM_Encoder_Start+0x9e>

08003570 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003570:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d03b      	beq.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8003578:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800357a:	2301      	movs	r3, #1
 800357c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	2302      	movs	r3, #2
 8003582:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003586:	6804      	ldr	r4, [r0, #0]
 8003588:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800358a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800358c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003590:	680d      	ldr	r5, [r1, #0]
 8003592:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003594:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003596:	6803      	ldr	r3, [r0, #0]
 8003598:	4c16      	ldr	r4, [pc, #88]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800359a:	42a3      	cmp	r3, r4
 800359c:	d01a      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a2:	d017      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80035a4:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	d013      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80035ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80035b0:	42a3      	cmp	r3, r4
 80035b2:	d00f      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80035b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80035b8:	42a3      	cmp	r3, r4
 80035ba:	d00b      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80035bc:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80035c0:	42a3      	cmp	r3, r4
 80035c2:	d007      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80035c4:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80035c8:	42a3      	cmp	r3, r4
 80035ca:	d003      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80035cc:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80035d0:	42a3      	cmp	r3, r4
 80035d2:	d104      	bne.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d8:	6849      	ldr	r1, [r1, #4]
 80035da:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035de:	2301      	movs	r3, #1
 80035e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e4:	2300      	movs	r3, #0
 80035e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80035ea:	4618      	mov	r0, r3
}
 80035ec:	bc30      	pop	{r4, r5}
 80035ee:	4770      	bx	lr
  __HAL_LOCK(htim);
 80035f0:	2002      	movs	r0, #2
}
 80035f2:	4770      	bx	lr
 80035f4:	40010000 	.word	0x40010000

080035f8 <__libc_init_array>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	4d0d      	ldr	r5, [pc, #52]	; (8003630 <__libc_init_array+0x38>)
 80035fc:	4c0d      	ldr	r4, [pc, #52]	; (8003634 <__libc_init_array+0x3c>)
 80035fe:	1b64      	subs	r4, r4, r5
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	2600      	movs	r6, #0
 8003604:	42a6      	cmp	r6, r4
 8003606:	d109      	bne.n	800361c <__libc_init_array+0x24>
 8003608:	4d0b      	ldr	r5, [pc, #44]	; (8003638 <__libc_init_array+0x40>)
 800360a:	4c0c      	ldr	r4, [pc, #48]	; (800363c <__libc_init_array+0x44>)
 800360c:	f000 f820 	bl	8003650 <_init>
 8003610:	1b64      	subs	r4, r4, r5
 8003612:	10a4      	asrs	r4, r4, #2
 8003614:	2600      	movs	r6, #0
 8003616:	42a6      	cmp	r6, r4
 8003618:	d105      	bne.n	8003626 <__libc_init_array+0x2e>
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003620:	4798      	blx	r3
 8003622:	3601      	adds	r6, #1
 8003624:	e7ee      	b.n	8003604 <__libc_init_array+0xc>
 8003626:	f855 3b04 	ldr.w	r3, [r5], #4
 800362a:	4798      	blx	r3
 800362c:	3601      	adds	r6, #1
 800362e:	e7f2      	b.n	8003616 <__libc_init_array+0x1e>
 8003630:	08003688 	.word	0x08003688
 8003634:	08003688 	.word	0x08003688
 8003638:	08003688 	.word	0x08003688
 800363c:	0800368c 	.word	0x0800368c

08003640 <memset>:
 8003640:	4402      	add	r2, r0
 8003642:	4603      	mov	r3, r0
 8003644:	4293      	cmp	r3, r2
 8003646:	d100      	bne.n	800364a <memset+0xa>
 8003648:	4770      	bx	lr
 800364a:	f803 1b01 	strb.w	r1, [r3], #1
 800364e:	e7f9      	b.n	8003644 <memset+0x4>

08003650 <_init>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	bf00      	nop
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr

0800365c <_fini>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr
